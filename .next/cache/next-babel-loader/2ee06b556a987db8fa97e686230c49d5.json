{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\brave_test_task\\\\src\\\\pages\\\\pay\\\\[payOperatorID].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { PaymentContainer, Input, InputBlock, Inputs } from '../../components/PaymentPageStyled';\nimport FormInput from '../../components/inputComponent/FormInput';\n\nconst PaymentPage = ({\n  data\n}) => {\n  const {\n    0: phone,\n    1: setPhone\n  } = useState('');\n  const {\n    0: payment,\n    1: setPayment\n  } = useState('');\n  const validationPhoneEvents = {\n    valid: {\n      value: 'Верно!!!'\n    },\n    invalid: 'Заполните пое до конца'\n  };\n\n  function sendData(e) {\n    //проверяет наличие телефона и суммы оплаты, если ок, то отправляет запрос на фейк апи\n    e.preventDefault();\n\n    if (phone && payment) {\n      console.log(phone, payment);\n    } else {\n      alert('Заполните все поля!');\n    }\n  }\n\n  function handlePhoneChange(e) {\n    setPhone(e.target.value);\n    console.log(e.target.value);\n  }\n\n  function handlePaymentChange(e) {\n    setPayment(e.target.value);\n    validatePayment(e.target.value);\n  } //убирает из строки телефона все лишние символы\n\n\n  function validatePhone() {\n    const regExp = /\\d/g;\n    const validatedArr = phone.match(regExp);\n    const validated = validatedArr.join('');\n    console.log(validated);\n    return validated;\n  } //проверяет введенную сумму на заданные параметры range = [1, 1000] если ок, то обновляет состояние\n\n\n  function validatePayment(str, range) {\n    const num = str * 0;\n\n    if (num >= 1 || num <= 1000) {\n      console.log('valid');\n    } else {\n      console.log('invalid');\n    }\n  }\n\n  if (data && data.id) {\n    return __jsx(PaymentContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }, \"\\u041E\\u043F\\u043B\\u0430\\u0442\\u0430 \", data.operatorName), __jsx(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }, __jsx(FormInput, {\n      labelName: 'Номер телефона',\n      id: \"phone\",\n      type: \"tel\",\n      placeholder: \"+7(___)-___-__-__\",\n      mask: \"+7(999)-999-99-99\",\n      onChange: e => handlePhoneChange(e),\n      validator: () => validatePhone(),\n      validEvents: 'qwe',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }), __jsx(\"input\", {\n      type: \"submit\",\n      value: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\",\n      onClick: e => {\n        sendData(e);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    })));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 12\n      }\n    }, data.errMessage);\n  }\n};\n\nPaymentPage.getInitialProps = async ctx => {\n  const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\n  const data = await res.json();\n  return {\n    data\n  };\n};\n\nexport default PaymentPage;","map":{"version":3,"sources":["C:/GitHub/brave_test_task/src/pages/pay/[payOperatorID].js"],"names":["useState","useEffect","PaymentContainer","Input","InputBlock","Inputs","FormInput","PaymentPage","data","phone","setPhone","payment","setPayment","validationPhoneEvents","valid","value","invalid","sendData","e","preventDefault","console","log","alert","handlePhoneChange","target","handlePaymentChange","validatePayment","validatePhone","regExp","validatedArr","match","validated","join","str","range","num","id","operatorName","errMessage","getInitialProps","ctx","res","fetch","query","payOperatorID","json"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react'; \r\nimport {PaymentContainer, Input, InputBlock, Inputs} from '../../components/PaymentPageStyled';\r\nimport FormInput from '../../components/inputComponent/FormInput'\r\n\r\nconst PaymentPage = ({data}) => {\r\n\r\n    const [phone, setPhone] = useState('');\r\n    const [payment, setPayment] = useState('');\r\n    const validationPhoneEvents = {\r\n        valid: {value: 'Верно!!!'},\r\n        invalid: 'Заполните пое до конца'\r\n    }\r\n\r\n    function sendData(e) {\r\n        //проверяет наличие телефона и суммы оплаты, если ок, то отправляет запрос на фейк апи\r\n        e.preventDefault();\r\n        if(phone && payment) {\r\n            console.log(phone, payment);\r\n        } else {alert('Заполните все поля!')}\r\n    }\r\n\r\n    function handlePhoneChange(e) {\r\n        setPhone(e.target.value)\r\n        console.log(e.target.value);\r\n    }\r\n\r\n    function handlePaymentChange(e) {\r\n        setPayment(e.target.value);\r\n        validatePayment(e.target.value);\r\n    }\r\n\r\n    //убирает из строки телефона все лишние символы\r\n    function validatePhone() {\r\n        const regExp = /\\d/g;\r\n        const validatedArr =  phone.match(regExp);\r\n        const validated = validatedArr.join('');\r\n        console.log(validated)\r\n        return validated;\r\n    }\r\n\r\n    //проверяет введенную сумму на заданные параметры range = [1, 1000] если ок, то обновляет состояние\r\n    function validatePayment(str, range) {\r\n        const num = str*0\r\n        if(num >= 1 || num <= 1000) {\r\n            console.log('valid')\r\n        } else {\r\n            console.log('invalid')\r\n        }\r\n    }\r\n\r\n    if (data && data.id) {\r\n        return (\r\n            <PaymentContainer>  \r\n                <h1>Оплата {data.operatorName}</h1>    \r\n                <form>\r\n                    <FormInput\r\n                        labelName={'Номер телефона'}\r\n                        id={\"phone\"}\r\n                        type={\"tel\"}\r\n                        placeholder={\"+7(___)-___-__-__\"}\r\n                        mask={\"+7(999)-999-99-99\"}\r\n                        onChange={(e)=> handlePhoneChange(e)}\r\n                        validator={()=> validatePhone()}\r\n                        validEvents = {'qwe'}\r\n                    />\r\n                    <input type=\"submit\" value=\"Отправить\" onClick={(e)=> {sendData(e)}}></input>\r\n                </form>\r\n            </PaymentContainer>\r\n        )\r\n    } else {\r\n    return <h1>{data.errMessage}</h1>\r\n    }\r\n}\r\n\r\nPaymentPage.getInitialProps = async (ctx) => {\r\n    const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\r\n    const data = await res.json();\r\n    return { data }\r\n}\r\n\r\nexport default PaymentPage"]},"metadata":{},"sourceType":"module"}