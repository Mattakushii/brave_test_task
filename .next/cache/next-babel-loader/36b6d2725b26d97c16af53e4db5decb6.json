{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\GitHub\\\\brave_test_task\\\\src\\\\pages\\\\pay\\\\[payOperatorID].js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { PaymentContainer, Input, InputBlock } from '../../components/PaymentPageStyled';\n\nvar PaymentPage = function PaymentPage(_ref) {\n  _s();\n\n  var data = _ref.data;\n\n  //для избежания предупреждения useLayoutEffect на стороне сервера\n  var _useState = useState(false),\n      showChild = _useState[0],\n      setShowChild = _useState[1];\n\n  var _useState2 = useState(''),\n      phone = _useState2[0],\n      setPhone = _useState2[1];\n\n  var _useState3 = useState(''),\n      payment = _useState3[0],\n      setPayment = _useState3[1];\n\n  useEffect(function () {\n    setShowChild(true);\n  }, []);\n\n  function sendData(e) {\n    //проверяет наличие телефона и суммы оплаты, если ок, то отправляет запрос на фейк апи\n    e.preventDefault();\n\n    if (phone && payment) {\n      validatePhone(phone);\n      console.log(phone, payment);\n    }\n\n    alert('Заполните все поля!');\n  }\n\n  function handlePhoneChange(e) {\n    setPhone(e.target.value);\n  }\n\n  function handlePaymentChange(e) {\n    setPayment(e.target.value);\n  } //убирает из строки телефона все лишние символы\n\n\n  function validatePhone(str) {\n    var regExp = /\\d/g;\n    var validatedArr = str.match(regExp);\n    var validated = validatedArr.join('');\n    return validated;\n  } //\n\n\n  function validatePhone(str) {}\n\n  if (!showChild) {\n    return null;\n  } else if (data && data.id) {\n    return __jsx(PaymentContainer, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, __jsx(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, \"\\u041E\\u043F\\u043B\\u0430\\u0442\\u0430 \", data.operatorName), __jsx(\"form\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    }, __jsx(InputBlock, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"phone\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 25\n      }\n    }, \"\\u041D\\u043E\\u043C\\u0435\\u0440 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\\u0430\"), __jsx(Input, {\n      mask: \"+7(999)999-99-99\",\n      id: \"phone\",\n      type: \"text\",\n      onChange: function onChange(e) {\n        handlePhoneChange(e);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 25\n      }\n    }), __jsx(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 25\n      }\n    })), __jsx(InputBlock, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"payment\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }\n    }, \"\\u0421\\u0443\\u043C\\u043C\\u0430 \\u043F\\u043B\\u0430\\u0442\\u0435\\u0436\\u0430\"), __jsx(Input, {\n      maskPlaceholder: \"\",\n      mask: \"9999\",\n      id: \"payment\",\n      type: \"text\",\n      onChange: function onChange(e) {\n        handlePaymentChange(e);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }\n    }), __jsx(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }\n    })), __jsx(\"button\", {\n      onClick: function onClick(e) {\n        sendData(e);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }\n    }, \"go\")));\n  } else {\n    return __jsx(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 12\n      }\n    }, data.errMessage);\n  }\n};\n\n_s(PaymentPage, \"tlyBDZ9ovSzDzc9HU8f5mfFpZGw=\");\n\n_c = PaymentPage;\n\nPaymentPage.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var res, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(\"http://localhost:3000/api/operators/\".concat(ctx.query.payOperatorID));\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return res.json();\n\n          case 5:\n            data = _context.sent;\n            return _context.abrupt(\"return\", {\n              data: data\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default PaymentPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentPage\");","map":{"version":3,"sources":["C:/GitHub/brave_test_task/src/pages/pay/[payOperatorID].js"],"names":["useState","useEffect","PaymentContainer","Input","InputBlock","PaymentPage","data","showChild","setShowChild","phone","setPhone","payment","setPayment","sendData","e","preventDefault","validatePhone","console","log","alert","handlePhoneChange","target","value","handlePaymentChange","str","regExp","validatedArr","match","validated","join","id","operatorName","errMessage","getInitialProps","ctx","fetch","query","payOperatorID","res","json"],"mappings":";;;;;;;;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAAQC,gBAAR,EAA0BC,KAA1B,EAAiCC,UAAjC,QAAkD,oCAAlD;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAY;AAAA;;AAAA,MAAVC,IAAU,QAAVA,IAAU;;AAC5B;AAD4B,kBAEMN,QAAQ,CAAC,KAAD,CAFd;AAAA,MAErBO,SAFqB;AAAA,MAEVC,YAFU;;AAAA,mBAIFR,QAAQ,CAAC,EAAD,CAJN;AAAA,MAIrBS,KAJqB;AAAA,MAIdC,QAJc;;AAAA,mBAKEV,QAAQ,CAAC,EAAD,CALV;AAAA,MAKrBW,OALqB;AAAA,MAKZC,UALY;;AAO5BX,EAAAA,SAAS,CAAC,YAAM;AAAEO,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAAoB,GAA7B,EAA+B,EAA/B,CAAT;;AAEA,WAASK,QAAT,CAAkBC,CAAlB,EAAqB;AACjB;AACAA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAGN,KAAK,IAAIE,OAAZ,EAAqB;AACjBK,MAAAA,aAAa,CAACP,KAAD,CAAb;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ,EAAmBE,OAAnB;AACH;;AAACQ,IAAAA,KAAK,CAAC,qBAAD,CAAL;AACL;;AAED,WAASC,iBAAT,CAA2BN,CAA3B,EAA8B;AAC1BJ,IAAAA,QAAQ,CAACI,CAAC,CAACO,MAAF,CAASC,KAAV,CAAR;AACH;;AAED,WAASC,mBAAT,CAA6BT,CAA7B,EAAgC;AAC5BF,IAAAA,UAAU,CAACE,CAAC,CAACO,MAAF,CAASC,KAAV,CAAV;AACH,GAxB2B,CA0B5B;;;AACA,WAASN,aAAT,CAAuBQ,GAAvB,EAA4B;AACxB,QAAMC,MAAM,GAAG,KAAf;AACA,QAAMC,YAAY,GAAIF,GAAG,CAACG,KAAJ,CAAUF,MAAV,CAAtB;AACA,QAAMG,SAAS,GAAGF,YAAY,CAACG,IAAb,CAAkB,EAAlB,CAAlB;AACA,WAAOD,SAAP;AACH,GAhC2B,CAkC5B;;;AACA,WAASZ,aAAT,CAAuBQ,GAAvB,EAA4B,CAE3B;;AAGD,MAAI,CAACjB,SAAL,EAAgB;AACZ,WAAO,IAAP;AACH,GAFD,MAEM,IAAID,IAAI,IAAIA,IAAI,CAACwB,EAAjB,EAAqB;AACvB,WACI,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAAYxB,IAAI,CAACyB,YAAjB,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yFADJ,EAEI,MAAC,KAAD;AACI,MAAA,IAAI,EAAC,kBADT;AAEI,MAAA,EAAE,EAAC,OAFP;AAGI,MAAA,IAAI,EAAC,MAHT;AAII,MAAA,QAAQ,EAAE,kBAACjB,CAAD,EAAK;AAACM,QAAAA,iBAAiB,CAACN,CAAD,CAAjB;AAAqB,OAJzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,CADJ,EAWI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFADJ,EAEI,MAAC,KAAD;AACI,MAAA,eAAe,EAAC,EADpB;AAEI,MAAA,IAAI,EAAC,MAFT;AAGI,MAAA,EAAE,EAAC,SAHP;AAII,MAAA,IAAI,EAAC,MAJT;AAKI,MAAA,QAAQ,EAAE,kBAACA,CAAD,EAAK;AAACS,QAAAA,mBAAmB,CAACT,CAAD,CAAnB;AAAuB,OAL3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,CAXJ,EAsBI;AAAQ,MAAA,OAAO,EAAE,iBAACA,CAAD,EAAM;AAACD,QAAAA,QAAQ,CAACC,CAAD,CAAR;AAAY,OAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAtBJ,CAFJ,CADJ;AA6BH,GA9BK,MA8BC;AACP,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKR,IAAI,CAAC0B,UAAV,CAAP;AACC;AACJ,CA3ED;;GAAM3B,W;;KAAAA,W;;AA6ENA,WAAW,CAAC4B,eAAZ;AAAA,uEAA8B,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACRC,KAAK,+CAAwCD,GAAG,CAACE,KAAJ,CAAUC,aAAlD,EADG;;AAAA;AACpBC,YAAAA,GADoB;AAAA;AAAA,mBAEPA,GAAG,CAACC,IAAJ,EAFO;;AAAA;AAEpBjC,YAAAA,IAFoB;AAAA,6CAGnB;AAAEA,cAAAA,IAAI,EAAJA;AAAF,aAHmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9B;;AAAA;AAAA;AAAA;AAAA;;AAMA,eAAeD,WAAf","sourcesContent":["import {useState, useEffect} from 'react'; \r\nimport {PaymentContainer, Input, InputBlock} from '../../components/PaymentPageStyled';\r\n\r\nconst PaymentPage = ({data}) => {\r\n    //для избежания предупреждения useLayoutEffect на стороне сервера\r\n    const [showChild, setShowChild] = useState(false);\r\n\r\n    const [phone, setPhone] = useState('');\r\n    const [payment, setPayment] = useState('');\r\n\r\n    useEffect(() => { setShowChild(true) }, []);\r\n\r\n    function sendData(e) {\r\n        //проверяет наличие телефона и суммы оплаты, если ок, то отправляет запрос на фейк апи\r\n        e.preventDefault();\r\n        if(phone && payment) {\r\n            validatePhone(phone);\r\n            console.log(phone, payment);\r\n        } alert('Заполните все поля!')\r\n    }\r\n\r\n    function handlePhoneChange(e) {\r\n        setPhone(e.target.value)\r\n    }\r\n\r\n    function handlePaymentChange(e) {\r\n        setPayment(e.target.value)\r\n    }\r\n\r\n    //убирает из строки телефона все лишние символы\r\n    function validatePhone(str) {\r\n        const regExp = /\\d/g;\r\n        const validatedArr =  str.match(regExp);\r\n        const validated = validatedArr.join('');\r\n        return validated;\r\n    }\r\n\r\n    //\r\n    function validatePhone(str) {\r\n        \r\n    }\r\n\r\n    \r\n    if (!showChild) {\r\n        return null;\r\n    }else if (data && data.id) {\r\n        return (\r\n            <PaymentContainer>  \r\n                <h1>Оплата {data.operatorName}</h1>    \r\n                <form>\r\n                    <InputBlock>\r\n                        <label htmlFor=\"phone\">Номер телефона</label>\r\n                        <Input \r\n                            mask=\"+7(999)999-99-99\" \r\n                            id=\"phone\" \r\n                            type=\"text\" \r\n                            onChange={(e)=>{handlePhoneChange(e)}}>\r\n                        </Input>\r\n                        <span></span>\r\n                    </InputBlock>\r\n                    <InputBlock>\r\n                        <label htmlFor=\"payment\">Сумма платежа</label>\r\n                        <Input\r\n                            maskPlaceholder=\"\"\r\n                            mask=\"9999\" \r\n                            id=\"payment\" \r\n                            type=\"text\"\r\n                            onChange={(e)=>{handlePaymentChange(e)}}>      \r\n                        </Input>\r\n                        <span></span>    \r\n                    </InputBlock>\r\n                    <button onClick={(e)=> {sendData(e)}}>go</button>\r\n                </form>\r\n            </PaymentContainer>\r\n        )\r\n    } else {\r\n    return <h1>{data.errMessage}</h1>\r\n    }\r\n}\r\n\r\nPaymentPage.getInitialProps = async (ctx) => {\r\n    const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\r\n    const data = await res.json();\r\n    return { data }\r\n}\r\n\r\nexport default PaymentPage"]},"metadata":{},"sourceType":"module"}