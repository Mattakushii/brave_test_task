{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\brave_test_task\\\\src\\\\pages\\\\pay\\\\[payOperatorID].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport { PaymentContainer, InputBlock, Input } from '../../components/PaymentPageStyled';\nimport FormInput from '../../components/inputComponent/FormInput';\n\nconst PaymentPage = ({\n  data\n}) => {\n  //добавить логические состояния validphone validpayment чтобы включать выключать кнопку\n  const {\n    0: phone,\n    1: setPhone\n  } = useState('');\n  const {\n    0: validPhone,\n    1: setValidPhone\n  } = useState(false);\n  const {\n    0: payment,\n    1: setPayment\n  } = useState('');\n  const {\n    0: validPayment,\n    1: setValidPayment\n  } = useState(false);\n  const {\n    0: validForm,\n    1: setValidForm\n  } = useState(false);\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({\n    phone: '',\n    payment: ''\n  }); //сделать логику для отключения кнопки\n\n  function handleUserInput(e) {\n    const inputName = e.target.name;\n    const value = e.target.value;\n\n    switch (inputName) {\n      case 'phone':\n        setPhone(value);\n        validateForm(inputName, phone);\n        break;\n\n      case 'payment':\n        setPayment(value);\n        validateForm(inputName, payment);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  function validateForm(fieldName, value) {\n    let validationErrors = errors;\n    let isValidPhone = validPhone;\n    let isValidPayment = validPayment;\n\n    switch (fieldName) {\n      case 'phone':\n        if (value == '') {\n          setPhone(value + '+7(');\n        } else if (value.length == 6) {\n          setPhone(value + \")-\");\n        }\n\n        console.log(value);\n        break;\n\n      case 'payment':\n        console.log(value);\n\n      default:\n        break;\n    }\n  }\n\n  function sendData(e) {\n    console.log(phone, payment);\n    e.preventDefault();\n  }\n\n  if (data && data.id) {\n    return __jsx(PaymentContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }, \"\\u041E\\u043F\\u043B\\u0430\\u0442\\u0430 \", data.operatorName), __jsx(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }\n    }, __jsx(InputBlock, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"phone\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }\n    }, \"\\u041D\\u043E\\u043C\\u0435\\u0440 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\\u0430\"), __jsx(\"input\", {\n      id: \"phone\",\n      name: \"phone\",\n      value: phone,\n      type: \"tel\",\n      placeholder: \"+7(999)-999-99-99\",\n      onChange: e => handleUserInput(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }\n    }), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 25\n      }\n    }, \"\\u041E\\u0442\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0430 \\u043E\\u0448\\u0438\\u0431\\u043E\\u043A\")), __jsx(InputBlock, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"payment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }\n    }, \"\\u0421\\u0443\\u043C\\u043C\\u0430 \\u043F\\u043B\\u0430\\u0442\\u0435\\u0436\\u0430\"), __jsx(\"input\", {\n      id: \"payment\",\n      name: \"payment\",\n      value: payment,\n      type: \"text\",\n      placeholder: \"\\u0421\\u0443\\u043C\\u043C\\u0430 \\u043E\\u0442 1 \\u0434\\u043E 1000\\u0440\",\n      onChange: e => handleUserInput(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 25\n      }\n    }), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 25\n      }\n    }, \"\\u041E\\u0442\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0430 \\u043E\\u0448\\u0438\\u0431\\u043E\\u043A\")), __jsx(\"input\", {\n      type: \"submit\",\n      value: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\",\n      onClick: e => {\n        sendData(e);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    })));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 16\n      }\n    }, data.errMessage);\n  }\n};\n\nPaymentPage.getInitialProps = async ctx => {\n  const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\n  const data = await res.json();\n  return {\n    data\n  };\n};\n\nexport default PaymentPage;\nconst validationPhoneEvents = {\n  valid: {\n    value: 'Верно!!!',\n    bool: true\n  },\n  invalid: {\n    value: 'Заполните поле до конца',\n    bool: false\n  }\n};\nconst validationPaymentEvents = {\n  valid: {\n    value: 'Верно!!!',\n    bool: true\n  },\n  invalid: {\n    value: 'Введите сумму от 1 до 1000 рублей',\n    bool: false\n  }\n};","map":{"version":3,"sources":["C:/GitHub/brave_test_task/src/pages/pay/[payOperatorID].js"],"names":["useState","PaymentContainer","InputBlock","Input","FormInput","PaymentPage","data","phone","setPhone","validPhone","setValidPhone","payment","setPayment","validPayment","setValidPayment","validForm","setValidForm","errors","setErrors","handleUserInput","e","inputName","target","name","value","validateForm","fieldName","validationErrors","isValidPhone","isValidPayment","length","console","log","sendData","preventDefault","id","operatorName","errMessage","getInitialProps","ctx","res","fetch","query","payOperatorID","json","validationPhoneEvents","valid","bool","invalid","validationPaymentEvents"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AACA,SAAQC,gBAAR,EAA0BC,UAA1B,EAAqCC,KAArC,QAAiD,oCAAjD;AACA,OAAOC,SAAP,MAAsB,2CAAtB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAC5B;AACA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACS,UAAD;AAAA,OAAaC;AAAb,MAA8BV,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAA,OAACW,OAAD;AAAA,OAAUC;AAAV,MAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAAA,OAACa,YAAD;AAAA,OAAeC;AAAf,MAAkCd,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM;AAAA,OAACe,SAAD;AAAA,OAAYC;AAAZ,MAA4BhB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACiB,MAAD;AAAA,OAASC;AAAT,MAAsBlB,QAAQ,CAAC;AACjCO,IAAAA,KAAK,EAAE,EAD0B;AAEjCI,IAAAA,OAAO,EAAE;AAFwB,GAAD,CAApC,CAP4B,CAW5B;;AAEA,WAASQ,eAAT,CAAyBC,CAAzB,EAA4B;AACxB,UAAMC,SAAS,GAAGD,CAAC,CAACE,MAAF,CAASC,IAA3B;AACA,UAAMC,KAAK,GAAGJ,CAAC,CAACE,MAAF,CAASE,KAAvB;;AACA,YAAOH,SAAP;AACI,WAAK,OAAL;AACIb,QAAAA,QAAQ,CAACgB,KAAD,CAAR;AACAC,QAAAA,YAAY,CAACJ,SAAD,EAAYd,KAAZ,CAAZ;AACA;;AACJ,WAAK,SAAL;AACIK,QAAAA,UAAU,CAACY,KAAD,CAAV;AACAC,QAAAA,YAAY,CAACJ,SAAD,EAAYV,OAAZ,CAAZ;AACA;;AACJ;AACI;AAVR;AAYH;;AAED,WAASc,YAAT,CAAsBC,SAAtB,EAAiCF,KAAjC,EAAwC;AACpC,QAAIG,gBAAgB,GAAGV,MAAvB;AACA,QAAIW,YAAY,GAAGnB,UAAnB;AACA,QAAIoB,cAAc,GAAGhB,YAArB;;AAEA,YAAOa,SAAP;AACI,WAAK,OAAL;AACI,YAAGF,KAAK,IAAI,EAAZ,EAAgB;AACZhB,UAAAA,QAAQ,CAACgB,KAAK,GAAG,KAAT,CAAR;AACH,SAFD,MAEO,IAAGA,KAAK,CAACM,MAAN,IAAgB,CAAnB,EAAsB;AACzBtB,UAAAA,QAAQ,CAACgB,KAAK,GAAG,IAAT,CAAR;AACH;;AACDO,QAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACA;;AACJ,WAAK,SAAL;AACIO,QAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;;AACJ;AACI;AAZR;AAcH;;AAED,WAASS,QAAT,CAAkBb,CAAlB,EAAqB;AACjBW,IAAAA,OAAO,CAACC,GAAR,CAAYzB,KAAZ,EAAmBI,OAAnB;AACAS,IAAAA,CAAC,CAACc,cAAF;AACH;;AAED,MAAI5B,IAAI,IAAIA,IAAI,CAAC6B,EAAjB,EAAqB;AACjB,WACI,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAAY7B,IAAI,CAAC8B,YAAjB,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yFADJ,EAEI;AACI,MAAA,EAAE,EAAC,OADP;AAEI,MAAA,IAAI,EAAC,OAFT;AAGI,MAAA,KAAK,EAAE7B,KAHX;AAII,MAAA,IAAI,EAAC,KAJT;AAKI,MAAA,WAAW,EAAC,mBALhB;AAMI,MAAA,QAAQ,EAAGa,CAAD,IAAMD,eAAe,CAACC,CAAD,CANnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qGAXJ,CADJ,EAcI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,OAAO,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFADJ,EAEI;AACI,MAAA,EAAE,EAAC,SADP;AAEI,MAAA,IAAI,EAAC,SAFT;AAGI,MAAA,KAAK,EAAET,OAHX;AAII,MAAA,IAAI,EAAC,MAJT;AAKI,MAAA,WAAW,EAAC,uEALhB;AAMI,MAAA,QAAQ,EAAGS,CAAD,IAAMD,eAAe,CAACC,CAAD,CANnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qGAVJ,CAdJ,EA2BI;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,wDAA3B;AAAuC,MAAA,OAAO,EAAGA,CAAD,IAAM;AAACa,QAAAA,QAAQ,CAACb,CAAD,CAAR;AAAY,OAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3BJ,CAFJ,CADJ;AAkCH,GAnCD,MAmCO;AACH,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKd,IAAI,CAAC+B,UAAV,CAAP;AACH;AACJ,CA9FD;;AAgGAhC,WAAW,CAACiC,eAAZ,GAA8B,MAAOC,GAAP,IAAe;AACzC,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,uCAAsCF,GAAG,CAACG,KAAJ,CAAUC,aAAc,EAAhE,CAAvB;AACA,QAAMrC,IAAI,GAAG,MAAMkC,GAAG,CAACI,IAAJ,EAAnB;AACA,SAAO;AAAEtC,IAAAA;AAAF,GAAP;AACH,CAJD;;AAMA,eAAeD,WAAf;AAEA,MAAMwC,qBAAqB,GAAG;AAC1BC,EAAAA,KAAK,EAAE;AACHtB,IAAAA,KAAK,EAAE,UADJ;AAEHuB,IAAAA,IAAI,EAAE;AAFH,GADmB;AAK1BC,EAAAA,OAAO,EAAE;AACLxB,IAAAA,KAAK,EAAE,yBADF;AAELuB,IAAAA,IAAI,EAAE;AAFD;AALiB,CAA9B;AAWA,MAAME,uBAAuB,GAAG;AAC5BH,EAAAA,KAAK,EAAE;AACHtB,IAAAA,KAAK,EAAE,UADJ;AAEHuB,IAAAA,IAAI,EAAE;AAFH,GADqB;AAK5BC,EAAAA,OAAO,EAAE;AACLxB,IAAAA,KAAK,EAAE,mCADF;AAELuB,IAAAA,IAAI,EAAE;AAFD;AALmB,CAAhC","sourcesContent":["import {useState} from 'react'; \r\nimport {PaymentContainer, InputBlock,Input} from '../../components/PaymentPageStyled';\r\nimport FormInput from '../../components/inputComponent/FormInput'\r\n\r\nconst PaymentPage = ({data}) => {\r\n    //добавить логические состояния validphone validpayment чтобы включать выключать кнопку\r\n    const [phone, setPhone] = useState('');\r\n    const [validPhone, setValidPhone] = useState(false);\r\n    const [payment, setPayment] = useState('');\r\n    const [validPayment, setValidPayment] = useState(false);\r\n    const [validForm, setValidForm] = useState(false);\r\n    const [errors, setErrors] = useState({\r\n        phone: '',\r\n        payment: '',\r\n    })\r\n    //сделать логику для отключения кнопки\r\n\r\n    function handleUserInput(e) {\r\n        const inputName = e.target.name;\r\n        const value = e.target.value;\r\n        switch(inputName) {\r\n            case 'phone': \r\n                setPhone(value);\r\n                validateForm(inputName, phone);\r\n                break;\r\n            case 'payment':\r\n                setPayment(value);\r\n                validateForm(inputName, payment);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    function validateForm(fieldName, value) {\r\n        let validationErrors = errors;\r\n        let isValidPhone = validPhone;\r\n        let isValidPayment = validPayment;\r\n\r\n        switch(fieldName) {\r\n            case 'phone':\r\n                if(value == '') {\r\n                    setPhone(value + '+7(');\r\n                } else if(value.length == 6) {\r\n                    setPhone(value + \")-\")\r\n                }\r\n                console.log(value);\r\n                break;\r\n            case 'payment':\r\n                console.log(value);\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    function sendData(e) {\r\n        console.log(phone, payment);\r\n        e.preventDefault();\r\n    }\r\n    \r\n    if (data && data.id) {\r\n        return (\r\n            <PaymentContainer>  \r\n                <h1>Оплата {data.operatorName}</h1>    \r\n                <form>\r\n                    <InputBlock>\r\n                        <label htmlFor=\"phone\">Номер телефона</label>\r\n                        <input \r\n                            id=\"phone\"\r\n                            name=\"phone\"\r\n                            value={phone} \r\n                            type=\"tel\"\r\n                            placeholder=\"+7(999)-999-99-99\"\r\n                            onChange={(e)=> handleUserInput(e)}\r\n                            \r\n                        ></input>\r\n                        <div>Отработка ошибок</div>\r\n                    </InputBlock>\r\n                    <InputBlock>\r\n                        <label htmlFor=\"payment\">Сумма платежа</label>\r\n                        <input \r\n                            id=\"payment\"\r\n                            name=\"payment\"\r\n                            value={payment} \r\n                            type=\"text\"\r\n                            placeholder=\"Сумма от 1 до 1000р\"\r\n                            onChange={(e)=> handleUserInput(e)}\r\n                        ></input>\r\n                        <div>Отработка ошибок</div>\r\n                    </InputBlock>\r\n                    \r\n                    <input type=\"submit\" value=\"Отправить\" onClick={(e)=> {sendData(e)}}></input>\r\n                </form>\r\n            </PaymentContainer>\r\n        )\r\n    } else {\r\n        return <h1>{data.errMessage}</h1>\r\n    }\r\n}\r\n\r\nPaymentPage.getInitialProps = async (ctx) => {\r\n    const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\r\n    const data = await res.json();\r\n    return { data }\r\n}\r\n\r\nexport default PaymentPage\r\n\r\nconst validationPhoneEvents = {\r\n    valid: {\r\n        value: 'Верно!!!', \r\n        bool: true\r\n    },\r\n    invalid: {\r\n        value: 'Заполните поле до конца',\r\n        bool: false\r\n    }\r\n}\r\n\r\nconst validationPaymentEvents = {\r\n    valid: {\r\n        value: 'Верно!!!', \r\n        bool: true\r\n    },\r\n    invalid: {\r\n        value: 'Введите сумму от 1 до 1000 рублей',\r\n        bool: false\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}