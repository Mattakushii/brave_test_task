{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\brave_test_task\\\\src\\\\pages\\\\pay\\\\[payOperatorID].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport { PaymentContainer } from '../../components/PaymentPageStyled';\nimport FormInput from '../../components/inputComponent/FormInput';\n\nconst PaymentPage = ({\n  data\n}) => {\n  //добавить логические состояния validphone validpayment чтобы включать выключать кнопку\n  const {\n    0: phone,\n    1: setPhone\n  } = useState('');\n  const {\n    0: validPhone,\n    1: setValidPhone\n  } = useState(false);\n  const {\n    0: payment,\n    1: setPayment\n  } = useState('');\n  const {\n    0: validPayment,\n    1: setValidPayment\n  } = useState(false);\n  const {\n    0: validForm,\n    1: setValidForm\n  } = useState(false); //сделать логику для отключения кнопки\n\n  function sendData(e) {\n    console.log('work');\n    e.preventDefault();\n  }\n\n  if (data && data.id) {\n    return __jsx(PaymentContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }\n    }, \"\\u041E\\u043F\\u043B\\u0430\\u0442\\u0430 \", data.operatorName), __jsx(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 25\n      }\n    }, \"\\u041D\\u043E\\u043C\\u0435\\u0440 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\\u0430\")), __jsx(\"input\", {\n      type: \"submit\",\n      value: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\",\n      onClick: e => {\n        sendData(e);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }\n    })));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 12\n      }\n    }, data.errMessage);\n  }\n};\n\nPaymentPage.getInitialProps = async ctx => {\n  const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\n  const data = await res.json();\n  return {\n    data\n  };\n};\n\nexport default PaymentPage;\nconst validationPhoneEvents = {\n  valid: {\n    value: 'Верно!!!',\n    bool: true\n  },\n  invalid: {\n    value: 'Заполните поле до конца',\n    bool: false\n  }\n};\nconst validationPaymentEvents = {\n  valid: {\n    value: 'Верно!!!',\n    bool: true\n  },\n  invalid: {\n    value: 'Введите сумму от 1 до 1000 рублей',\n    bool: false\n  }\n};","map":{"version":3,"sources":["C:/GitHub/brave_test_task/src/pages/pay/[payOperatorID].js"],"names":["useState","PaymentContainer","FormInput","PaymentPage","data","phone","setPhone","validPhone","setValidPhone","payment","setPayment","validPayment","setValidPayment","validForm","setValidForm","sendData","e","console","log","preventDefault","id","operatorName","errMessage","getInitialProps","ctx","res","fetch","query","payOperatorID","json","validationPhoneEvents","valid","value","bool","invalid","validationPaymentEvents"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AACA,SAAQC,gBAAR,QAA+B,oCAA/B;AACA,OAAOC,SAAP,MAAsB,2CAAtB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAE5B;AACA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACO,UAAD;AAAA,OAAaC;AAAb,MAA8BR,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAA,OAACS,OAAD;AAAA,OAAUC;AAAV,MAAwBV,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAAA,OAACW,YAAD;AAAA,OAAeC;AAAf,MAAkCZ,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM;AAAA,OAACa,SAAD;AAAA,OAAYC;AAAZ,MAA4Bd,QAAQ,CAAC,KAAD,CAA1C,CAP4B,CAQ5B;;AAGA,WAASe,QAAT,CAAkBC,CAAlB,EAAqB;AACjBC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAF,IAAAA,CAAC,CAACG,cAAF;AACH;;AAED,MAAIf,IAAI,IAAIA,IAAI,CAACgB,EAAjB,EAAqB;AACjB,WACI,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAAYhB,IAAI,CAACiB,YAAjB,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yFADJ,CADJ,EAKI;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,wDAA3B;AAAuC,MAAA,OAAO,EAAGL,CAAD,IAAM;AAACD,QAAAA,QAAQ,CAACC,CAAD,CAAR;AAAY,OAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CAFJ,CADJ;AAYH,GAbD,MAaO;AACP,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKZ,IAAI,CAACkB,UAAV,CAAP;AACC;AACJ,CAhCD;;AAkCAnB,WAAW,CAACoB,eAAZ,GAA8B,MAAOC,GAAP,IAAe;AACzC,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,uCAAsCF,GAAG,CAACG,KAAJ,CAAUC,aAAc,EAAhE,CAAvB;AACA,QAAMxB,IAAI,GAAG,MAAMqB,GAAG,CAACI,IAAJ,EAAnB;AACA,SAAO;AAAEzB,IAAAA;AAAF,GAAP;AACH,CAJD;;AAMA,eAAeD,WAAf;AAEA,MAAM2B,qBAAqB,GAAG;AAC1BC,EAAAA,KAAK,EAAE;AACHC,IAAAA,KAAK,EAAE,UADJ;AAEHC,IAAAA,IAAI,EAAE;AAFH,GADmB;AAK1BC,EAAAA,OAAO,EAAE;AACLF,IAAAA,KAAK,EAAE,yBADF;AAELC,IAAAA,IAAI,EAAE;AAFD;AALiB,CAA9B;AAWA,MAAME,uBAAuB,GAAG;AAC5BJ,EAAAA,KAAK,EAAE;AACHC,IAAAA,KAAK,EAAE,UADJ;AAEHC,IAAAA,IAAI,EAAE;AAFH,GADqB;AAK5BC,EAAAA,OAAO,EAAE;AACLF,IAAAA,KAAK,EAAE,mCADF;AAELC,IAAAA,IAAI,EAAE;AAFD;AALmB,CAAhC","sourcesContent":["import {useState} from 'react'; \r\nimport {PaymentContainer} from '../../components/PaymentPageStyled';\r\nimport FormInput from '../../components/inputComponent/FormInput'\r\n\r\nconst PaymentPage = ({data}) => {\r\n\r\n    //добавить логические состояния validphone validpayment чтобы включать выключать кнопку\r\n    const [phone, setPhone] = useState('');\r\n    const [validPhone, setValidPhone] = useState(false);\r\n    const [payment, setPayment] = useState('');\r\n    const [validPayment, setValidPayment] = useState(false);\r\n    const [validForm, setValidForm] = useState(false)\r\n    //сделать логику для отключения кнопки\r\n\r\n\r\n    function sendData(e) {\r\n        console.log('work');\r\n        e.preventDefault();\r\n    }\r\n\r\n    if (data && data.id) {\r\n        return (\r\n            <PaymentContainer>  \r\n                <h1>Оплата {data.operatorName}</h1>    \r\n                <form>\r\n                    <div>\r\n                        <label>Номер телефона</label>\r\n                    </div>\r\n                    \r\n                    <input type=\"submit\" value=\"Отправить\" onClick={(e)=> {sendData(e)}}></input>\r\n                </form>\r\n            </PaymentContainer>\r\n        )\r\n    } else {\r\n    return <h1>{data.errMessage}</h1>\r\n    }\r\n}\r\n\r\nPaymentPage.getInitialProps = async (ctx) => {\r\n    const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\r\n    const data = await res.json();\r\n    return { data }\r\n}\r\n\r\nexport default PaymentPage\r\n\r\nconst validationPhoneEvents = {\r\n    valid: {\r\n        value: 'Верно!!!', \r\n        bool: true\r\n    },\r\n    invalid: {\r\n        value: 'Заполните поле до конца',\r\n        bool: false\r\n    }\r\n}\r\n\r\nconst validationPaymentEvents = {\r\n    valid: {\r\n        value: 'Верно!!!', \r\n        bool: true\r\n    },\r\n    invalid: {\r\n        value: 'Введите сумму от 1 до 1000 рублей',\r\n        bool: false\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}