{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\brave_test_task\\\\src\\\\components\\\\inputFormComponent\\\\InputForm.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { InputBlock, Input, ErrorMessage, Label } from \"./InputFormStyled\";\n\nconst InputForm = props => {\n  const {\n    0: inputValue,\n    1: setInputValue\n  } = useState('');\n  const {\n    0: inputValid,\n    1: setInputValid\n  } = useState(false);\n  const {\n    0: inputError,\n    1: setInputError\n  } = useState({\n    error: 'Поле должно быть заполнено'\n  });\n  const phoneRegexp = /\\+7\\s?[\\(]{0,1}9[0-9]{2}[\\)][-]{0,1}\\s?\\d{3}[-]{0,1}\\d{2}[-]{0,1}\\d{2}/;\n  const paymentRegexp = /^\\d+$/;\n  const letterRegexp = /[а-яА-ЯёЁa-zA-Z]+$/;\n\n  function handleUserInput(e) {\n    const inputName = e.target.name;\n    const value = e.target.value;\n    setInputValue(value);\n    validate(inputName, value);\n  }\n\n  function validate(inputName, value) {\n    const validationError = inputError;\n    let isValidValue = inputValid;\n\n    switch (inputName) {\n      case 'phone':\n        if (value.length < inputValue.length) {\n          setInputValue(value);\n          props.callbackValidState(false);\n          validationError.error = 'Поле должно быть заполнено';\n        } else {\n          let val = [...value];\n\n          if (value.length === 7) {\n            val.splice(6, 0, ')', '-');\n            setInputValue(val.join(''));\n          }\n\n          if (value.length === 12) {\n            val.splice(11, 0, '-');\n            setInputValue(val.join(''));\n          }\n\n          if (value.length === 15) {\n            val.splice(14, 0, '-');\n            setInputValue(val.join(''));\n          }\n\n          if (value.length >= 17) {\n            const blockedValue = value.slice(0, 17);\n            setInputValue(blockedValue);\n          }\n        }\n\n        if (phoneRegexp.test(value)) {\n          isValidValue = true;\n          validationError.error = '';\n        } else if (value.match(letterRegexp)) {\n          isValidValue = false;\n          validationError.error = 'Поле содержит недопустимые символы';\n        } else {\n          isValidValue = false;\n          validationError.error = 'Поле должно быть заполено';\n        }\n\n        break;\n\n      case 'payment':\n        if (value === '') {\n          isValidValue = false;\n          validationError.error = 'Введите сумму в заданных границах (от 1р до 1000р)';\n        } else if (paymentRegexp.test(value)) {\n          const val = parseInt(value);\n\n          if (val >= 1 && val <= 1000) {\n            isValidValue = true;\n            validationError.error = '';\n          } else {\n            isValidValue = false;\n            validationError.error = 'Введите сумму в заданных границах (от 1р до 1000р)';\n          }\n        } else {\n          isValidValue = false;\n          validationError.error = 'Поле содержит недопустимые символы';\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    setInputValid(isValidValue);\n    setInputError(validationError);\n    props.callbackValueState(value);\n    props.callbackValidState(isValidValue);\n  }\n\n  function passFirstValue() {\n    if (inputValue.length === 0 && props.name === 'phone') {\n      setInputValue('+7(');\n    }\n  }\n\n  return __jsx(InputBlock, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, __jsx(Label, {\n    htmlFor: props.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, props.labelContent, \":\"), __jsx(Input, {\n    valid: inputValid,\n    id: props.id,\n    name: props.name,\n    type: props.type,\n    value: inputValue,\n    placeholder: props.placeholder,\n    onChange: e => {\n      handleUserInput(e);\n    },\n    onClick: () => {\n      passFirstValue();\n    },\n    onFocus: () => {\n      passFirstValue();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }), __jsx(ErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, inputError.error));\n};\n\nexport default InputForm;","map":{"version":3,"sources":["C:/GitHub/brave_test_task/src/components/inputFormComponent/InputForm.tsx"],"names":["React","useState","InputBlock","Input","ErrorMessage","Label","InputForm","props","inputValue","setInputValue","inputValid","setInputValid","inputError","setInputError","error","phoneRegexp","paymentRegexp","letterRegexp","handleUserInput","e","inputName","target","name","value","validate","validationError","isValidValue","length","callbackValidState","val","splice","join","blockedValue","slice","test","match","parseInt","callbackValueState","passFirstValue","labelContent","id","type","placeholder"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {InputBlock, Input, ErrorMessage, Label} from \"./InputFormStyled\";\r\n\r\ninterface InputFormProps {\r\n    id: string,\r\n    name: string,\r\n    type: string,\r\n    placeholder: string,\r\n    labelContent: string,\r\n    callbackValueState(value:string): void,\r\n    callbackValidState(isValid: boolean): void,\r\n}\r\n\r\nconst InputForm = (props:InputFormProps) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [inputValid, setInputValid] = useState(false);\r\n    const [inputError, setInputError] = useState({\r\n        error: 'Поле должно быть заполнено',\r\n    });\r\n\r\n\r\n    const phoneRegexp = /\\+7\\s?[\\(]{0,1}9[0-9]{2}[\\)][-]{0,1}\\s?\\d{3}[-]{0,1}\\d{2}[-]{0,1}\\d{2}/;\r\n    const paymentRegexp = /^\\d+$/;\r\n    const letterRegexp = /[а-яА-ЯёЁa-zA-Z]+$/;\r\n\r\n    function handleUserInput(e : React.ChangeEvent<HTMLInputElement>) {\r\n        const inputName = e.target.name;\r\n        const value = e.target.value;\r\n        setInputValue(value);\r\n        validate(inputName, value);\r\n    }\r\n\r\n    function validate(inputName: string, value : string) : void{\r\n        const validationError = inputError;\r\n        let isValidValue = inputValid;\r\n        switch (inputName) {\r\n            case 'phone':\r\n                if(value.length < inputValue.length) {\r\n                    setInputValue(value);\r\n                    props.callbackValidState(false);\r\n                    validationError.error = 'Поле должно быть заполнено';\r\n                }else {\r\n                    let val = [...value];\r\n                    if(value.length === 7) {\r\n                        val.splice(6, 0, ')', '-');\r\n                        setInputValue(val.join(''));\r\n                    }\r\n                    if(value.length === 12) {\r\n                        val.splice(11, 0, '-');\r\n                        setInputValue(val.join(''));\r\n                    }\r\n                    if(value.length === 15) {\r\n                        val.splice(14, 0, '-');\r\n                        setInputValue(val.join(''));\r\n                    }\r\n                    if(value.length >= 17) {\r\n                        const blockedValue = value.slice(0, 17);\r\n                        setInputValue(blockedValue);\r\n                    }\r\n                }\r\n                if(phoneRegexp.test(value)) {\r\n                    isValidValue = true;\r\n                    validationError.error = ''\r\n                } else if(value.match(letterRegexp)){\r\n                    isValidValue = false;\r\n                    validationError.error = 'Поле содержит недопустимые символы';\r\n                } else{\r\n                    isValidValue= false;\r\n                    validationError.error = 'Поле должно быть заполено';\r\n                }\r\n                break;\r\n            case 'payment':\r\n                if(value === '') {\r\n                    isValidValue = false;\r\n                    validationError.error = 'Введите сумму в заданных границах (от 1р до 1000р)';\r\n                } else if (paymentRegexp.test(value)) {\r\n                    const val = parseInt(value);\r\n                    if (val >= 1 && val <= 1000) {\r\n                        isValidValue = true;\r\n                        validationError.error = '';\r\n                    } else {\r\n                        isValidValue = false;\r\n                        validationError.error = 'Введите сумму в заданных границах (от 1р до 1000р)';\r\n                    }\r\n                } else {\r\n                    isValidValue = false;\r\n                    validationError.error = 'Поле содержит недопустимые символы';\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        setInputValid(isValidValue);\r\n        setInputError(validationError);\r\n        props.callbackValueState(value);\r\n        props.callbackValidState(isValidValue);\r\n    }\r\n\r\n    function passFirstValue() : void {\r\n        if(inputValue.length === 0 && props.name === 'phone') {\r\n            setInputValue('+7(');\r\n        }\r\n    }\r\n\r\n    return(\r\n        <InputBlock>\r\n            <Label htmlFor={props.name}>{props.labelContent}:</Label>\r\n            <Input\r\n                valid={inputValid}\r\n                id={props.id}\r\n                name={props.name}\r\n                type={props.type}\r\n                value={inputValue}\r\n                placeholder={props.placeholder}\r\n                onChange={(e:React.ChangeEvent<HTMLInputElement>) => {handleUserInput(e)}}\r\n                onClick={()=> {passFirstValue()}}\r\n                onFocus={()=> {passFirstValue()}}\r\n            />\r\n            <ErrorMessage>{inputError.error}</ErrorMessage>\r\n        </InputBlock>\r\n    )\r\n}\r\n\r\nexport default InputForm"]},"metadata":{},"sourceType":"module"}