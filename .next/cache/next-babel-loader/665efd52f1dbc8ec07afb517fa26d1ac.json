{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\brave_test_task\\\\src\\\\pages\\\\pay\\\\[payOperatorID].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { PaymentContainer, Input, InputBlock, Inputs } from '../../components/PaymentPageStyled';\nimport FormInput from '../../components/inputComponent/FormInput';\n\nconst PaymentPage = ({\n  data\n}) => {\n  const {\n    0: phone,\n    1: setPhone\n  } = useState('');\n  const {\n    0: payment,\n    1: setPayment\n  } = useState('');\n\n  function sendData(e) {\n    //проверяет наличие телефона и суммы оплаты, если ок, то отправляет запрос на фейк апи\n    e.preventDefault();\n\n    if (phone && payment) {\n      console.log(phone, payment);\n    } else {\n      alert('Заполните все поля!');\n    }\n  }\n\n  function handlePhoneChange(e) {\n    setPhone(e.target.value);\n  }\n\n  function handlePaymentChange(e) {\n    setPayment(e.target.value);\n    validatePayment(e.target.value);\n  } //убирает из строки телефона все лишние символы\n\n\n  function validatePhone(str) {\n    const regExp = /\\d/g;\n    const validatedArr = str.match(regExp);\n    const validated = validatedArr.join('');\n    return validated;\n  } //проверяет введенную сумму на заданные параметры range = [1, 1000] если ок, то обновляет состояние\n\n\n  function validatePayment(str, range) {\n    const num = str * 0;\n\n    if (num >= 1 || num <= 1000) {\n      console.log('valid');\n    } else {\n      console.log('invalid');\n    }\n  } // id mask pattern placeholder type callback\n\n\n  if (data && data.id) {\n    return __jsx(PaymentContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    }, \"\\u041E\\u043F\\u043B\\u0430\\u0442\\u0430 \", data.operatorName), __jsx(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, __jsx(FormInput, {\n      id: \"phone\",\n      type: \"\",\n      pattern: \"\\+7\\s?[\\(]{0,1}9[0-9]{2}[\\)][-]{0,1}\\s?\\d{3}[-]{0,1}\\d{2}[-]{0,1}\\d{2}\",\n      placeholder: \"+7(___)-___-__-__\",\n      mask: \"+7(999)-999-99-99\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }), __jsx(FormInput, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }\n    }), __jsx(\"input\", {\n      type: \"submit\",\n      value: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\",\n      onClick: e => {\n        sendData(e);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }\n    })));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 12\n      }\n    }, data.errMessage);\n  }\n};\n\nPaymentPage.getInitialProps = async ctx => {\n  const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\n  const data = await res.json();\n  return {\n    data\n  };\n};\n\nexport default PaymentPage;","map":{"version":3,"sources":["C:/GitHub/brave_test_task/src/pages/pay/[payOperatorID].js"],"names":["useState","useEffect","PaymentContainer","Input","InputBlock","Inputs","FormInput","PaymentPage","data","phone","setPhone","payment","setPayment","sendData","e","preventDefault","console","log","alert","handlePhoneChange","target","value","handlePaymentChange","validatePayment","validatePhone","str","regExp","validatedArr","match","validated","join","range","num","id","operatorName","errMessage","getInitialProps","ctx","res","fetch","query","payOperatorID","json"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,SAAQC,gBAAR,EAA0BC,KAA1B,EAAiCC,UAAjC,EAA6CC,MAA7C,QAA0D,oCAA1D;AACA,OAAOC,SAAP,MAAsB,2CAAtB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAE5B,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACW,OAAD;AAAA,OAAUC;AAAV,MAAwBZ,QAAQ,CAAC,EAAD,CAAtC;;AAGA,WAASa,QAAT,CAAkBC,CAAlB,EAAqB;AACjB;AACAA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAGN,KAAK,IAAIE,OAAZ,EAAqB;AACjBK,MAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ,EAAmBE,OAAnB;AACH,KAFD,MAEO;AAACO,MAAAA,KAAK,CAAC,qBAAD,CAAL;AAA6B;AACxC;;AAED,WAASC,iBAAT,CAA2BL,CAA3B,EAA8B;AAC1BJ,IAAAA,QAAQ,CAACI,CAAC,CAACM,MAAF,CAASC,KAAV,CAAR;AACH;;AAED,WAASC,mBAAT,CAA6BR,CAA7B,EAAgC;AAC5BF,IAAAA,UAAU,CAACE,CAAC,CAACM,MAAF,CAASC,KAAV,CAAV;AACAE,IAAAA,eAAe,CAACT,CAAC,CAACM,MAAF,CAASC,KAAV,CAAf;AACH,GArB2B,CAuB5B;;;AACA,WAASG,aAAT,CAAuBC,GAAvB,EAA4B;AACxB,UAAMC,MAAM,GAAG,KAAf;AACA,UAAMC,YAAY,GAAIF,GAAG,CAACG,KAAJ,CAAUF,MAAV,CAAtB;AACA,UAAMG,SAAS,GAAGF,YAAY,CAACG,IAAb,CAAkB,EAAlB,CAAlB;AACA,WAAOD,SAAP;AACH,GA7B2B,CA+B5B;;;AACA,WAASN,eAAT,CAAyBE,GAAzB,EAA8BM,KAA9B,EAAqC;AACjC,UAAMC,GAAG,GAAGP,GAAG,GAAC,CAAhB;;AACA,QAAGO,GAAG,IAAI,CAAP,IAAYA,GAAG,IAAI,IAAtB,EAA4B;AACxBhB,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH,KAFD,MAEO;AACHD,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACH;AACJ,GAvC2B,CAyC5B;;;AACA,MAAIT,IAAI,IAAIA,IAAI,CAACyB,EAAjB,EAAqB;AACjB,WACI,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAAYzB,IAAI,CAAC0B,YAAjB,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,SAAD;AACI,MAAA,EAAE,EAAE,OADR;AAEI,MAAA,IAAI,EAAE,EAFV;AAGI,MAAA,OAAO,EAAE,wEAHb;AAII,MAAA,WAAW,EAAE,mBAJjB;AAKI,MAAA,IAAI,EAAE,mBALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAQI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,EASI;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAC,wDAA3B;AAAuC,MAAA,OAAO,EAAGpB,CAAD,IAAM;AAACD,QAAAA,QAAQ,CAACC,CAAD,CAAR;AAAY,OAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,CAFJ,CADJ;AAgBH,GAjBD,MAiBO;AACP,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKN,IAAI,CAAC2B,UAAV,CAAP;AACC;AACJ,CA9DD;;AAgEA5B,WAAW,CAAC6B,eAAZ,GAA8B,MAAOC,GAAP,IAAe;AACzC,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,uCAAsCF,GAAG,CAACG,KAAJ,CAAUC,aAAc,EAAhE,CAAvB;AACA,QAAMjC,IAAI,GAAG,MAAM8B,GAAG,CAACI,IAAJ,EAAnB;AACA,SAAO;AAAElC,IAAAA;AAAF,GAAP;AACH,CAJD;;AAMA,eAAeD,WAAf","sourcesContent":["import {useState, useEffect} from 'react'; \r\nimport {PaymentContainer, Input, InputBlock, Inputs} from '../../components/PaymentPageStyled';\r\nimport FormInput from '../../components/inputComponent/FormInput'\r\n\r\nconst PaymentPage = ({data}) => {\r\n\r\n    const [phone, setPhone] = useState('');\r\n    const [payment, setPayment] = useState('');\r\n\r\n\r\n    function sendData(e) {\r\n        //проверяет наличие телефона и суммы оплаты, если ок, то отправляет запрос на фейк апи\r\n        e.preventDefault();\r\n        if(phone && payment) {\r\n            console.log(phone, payment);\r\n        } else {alert('Заполните все поля!')}\r\n    }\r\n\r\n    function handlePhoneChange(e) {\r\n        setPhone(e.target.value)\r\n    }\r\n\r\n    function handlePaymentChange(e) {\r\n        setPayment(e.target.value);\r\n        validatePayment(e.target.value);\r\n    }\r\n\r\n    //убирает из строки телефона все лишние символы\r\n    function validatePhone(str) {\r\n        const regExp = /\\d/g;\r\n        const validatedArr =  str.match(regExp);\r\n        const validated = validatedArr.join('');\r\n        return validated;\r\n    }\r\n\r\n    //проверяет введенную сумму на заданные параметры range = [1, 1000] если ок, то обновляет состояние\r\n    function validatePayment(str, range) {\r\n        const num = str*0\r\n        if(num >= 1 || num <= 1000) {\r\n            console.log('valid')\r\n        } else {\r\n            console.log('invalid')\r\n        }\r\n    }\r\n\r\n    // id mask pattern placeholder type callback\r\n    if (data && data.id) {\r\n        return (\r\n            <PaymentContainer>  \r\n                <h1>Оплата {data.operatorName}</h1>    \r\n                <form>\r\n                    <FormInput \r\n                        id={\"phone\"}\r\n                        type={\"\"}\r\n                        pattern={\"\\+7\\s?[\\(]{0,1}9[0-9]{2}[\\)][-]{0,1}\\s?\\d{3}[-]{0,1}\\d{2}[-]{0,1}\\d{2}\"}\r\n                        placeholder={\"+7(___)-___-__-__\"}\r\n                        mask={\"+7(999)-999-99-99\"}\r\n                    />\r\n                    <FormInput/>\r\n                    <input type=\"submit\" value=\"Отправить\" onClick={(e)=> {sendData(e)}}></input>\r\n                </form>\r\n            </PaymentContainer>\r\n        )\r\n    } else {\r\n    return <h1>{data.errMessage}</h1>\r\n    }\r\n}\r\n\r\nPaymentPage.getInitialProps = async (ctx) => {\r\n    const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\r\n    const data = await res.json();\r\n    return { data }\r\n}\r\n\r\nexport default PaymentPage"]},"metadata":{},"sourceType":"module"}