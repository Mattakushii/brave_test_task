{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\brave_test_task\\\\src\\\\components\\\\inputFormComponent\\\\InputForm.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\n\nconst InputForm = props => {\n  const {\n    0: inputValue,\n    1: setInputValue\n  } = useState('');\n  const {\n    0: inputValid,\n    1: setInputValid\n  } = useState(false);\n  const {\n    0: inputError,\n    1: setInputError\n  } = useState({\n    error: ''\n  });\n  const phoneRegexp = /\\+7\\s?[\\(]{0,1}9[0-9]{2}[\\)][-]{0,1}\\s?\\d{3}[-]{0,1}\\d{2}[-]{0,1}\\d{2}/;\n  const paymentRegexp = /^\\d+$/;\n  const letterRegexp = /[а-яА-ЯёЁa-zA-Z]+$/;\n\n  function handleUserInput(e) {\n    const inputName = e.target.name;\n    const value = e.target.value;\n    setInputValue(value);\n    validate(inputName, value);\n  }\n\n  function validate(inputName, value) {\n    const validationError = inputError;\n    let isValidValue = inputValid;\n\n    switch (inputName) {\n      case 'phone':\n        if (value.length < inputValue.length) {\n          setInputValue(value);\n          props.callbackValidState(false);\n          validationError.error = 'Поле должно быть заполено';\n        } else {\n          let val = [...value];\n\n          if (value.length === 7) {\n            val.splice(6, 0, ')', '-');\n            setInputValue(val.join(''));\n          }\n\n          if (value.length === 12) {\n            val.splice(11, 0, '-');\n            setInputValue(val.join(''));\n          }\n\n          if (value.length === 15) {\n            val.splice(14, 0, '-');\n            setInputValue(val.join(''));\n          }\n\n          if (value.length >= 17) {\n            const blockedValue = value.slice(0, 17);\n            setInputValue(blockedValue);\n          }\n        }\n\n        if (phoneRegexp.test(value)) {\n          isValidValue = true;\n          validationError.error = '';\n        } else if (value.match(letterRegexp)) {\n          isValidValue = false;\n          validationError.error = 'Поле должно содержать только цифры';\n        } else {\n          isValidValue = false;\n          validationError.error = 'Поле должно быть заполено';\n        }\n\n        break;\n\n      case 'payment':\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  function passFirstValue(value) {\n    if (phone.length === 0) {\n      setPhone('+7(');\n    }\n\n    console.log(phone, payment);\n  }\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, __jsx(\"label\", {\n    htmlFor: props.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }), __jsx(\"input\", {\n    id: props.id,\n    name: props.name,\n    type: props.type,\n    value: inputValue,\n    placeholder: props.placeholder,\n    onChange: e => {\n      handleUserInput(e);\n    },\n    onClick: () => {\n      props.additionalFunc();\n    },\n    onFocus: () => {\n      props.additionalFunc(inputValue);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, \"\\u043E\\u0448\\u0438\\u0431\\u043A\\u0438\"));\n};\n\nexport default InputForm;","map":{"version":3,"sources":["C:/GitHub/brave_test_task/src/components/inputFormComponent/InputForm.tsx"],"names":["React","useState","InputForm","props","inputValue","setInputValue","inputValid","setInputValid","inputError","setInputError","error","phoneRegexp","paymentRegexp","letterRegexp","handleUserInput","e","inputName","target","name","value","validate","validationError","isValidValue","length","callbackValidState","val","splice","join","blockedValue","slice","test","match","passFirstValue","phone","setPhone","console","log","payment","id","type","placeholder","additionalFunc"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\n\r\nexport interface InputFormProps {\r\n    id: string,\r\n    name: string,\r\n    type: string,\r\n    placeholder: string,\r\n    callbackValueState(value:string): void,\r\n    callbackValidState(isValid: boolean): void,\r\n    additionalFunc(): void | undefined\r\n}\r\n\r\nconst InputForm = (props:InputFormProps) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [inputValid, setInputValid] = useState(false);\r\n    const [inputError, setInputError] = useState({\r\n        error: '',\r\n    });\r\n\r\n    const phoneRegexp = /\\+7\\s?[\\(]{0,1}9[0-9]{2}[\\)][-]{0,1}\\s?\\d{3}[-]{0,1}\\d{2}[-]{0,1}\\d{2}/;\r\n    const paymentRegexp = /^\\d+$/;\r\n    const letterRegexp = /[а-яА-ЯёЁa-zA-Z]+$/;\r\n\r\n    function handleUserInput(e : React.ChangeEvent<HTMLInputElement>) {\r\n        const inputName = e.target.name;\r\n        const value = e.target.value;\r\n        setInputValue(value);\r\n        validate(inputName, value);\r\n    }\r\n\r\n    function validate(inputName: string, value : string) : void{\r\n        const validationError : any = inputError\r\n        let isValidValue : boolean = inputValid;\r\n        switch (inputName) {\r\n            case 'phone':\r\n                if(value.length < inputValue.length) {\r\n                    setInputValue(value);\r\n                    props.callbackValidState(false);\r\n                    validationError.error = 'Поле должно быть заполено';\r\n                }else {\r\n                    let val = [...value];\r\n                    if(value.length === 7) {\r\n                        val.splice(6, 0, ')', '-');\r\n                        setInputValue(val.join(''))\r\n                    }\r\n                    if(value.length === 12) {\r\n                        val.splice(11, 0, '-');\r\n                        setInputValue(val.join(''))\r\n                    }\r\n                    if(value.length === 15) {\r\n                        val.splice(14, 0, '-');\r\n                        setInputValue(val.join(''))\r\n                    }\r\n                    if(value.length >= 17) {\r\n                        const blockedValue = value.slice(0, 17)\r\n                        setInputValue(blockedValue)\r\n                    }\r\n                }\r\n                if(phoneRegexp.test(value)) {\r\n                    isValidValue = true;\r\n                    validationError.error = ''\r\n                } else if(value.match(letterRegexp)){\r\n                    isValidValue = false;\r\n                    validationError.error = 'Поле должно содержать только цифры'\r\n                } else{\r\n                    isValidValue= false;\r\n                    validationError.error = 'Поле должно быть заполено'\r\n                }\r\n                break;\r\n            case 'payment':\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    function passFirstValue(value: string) : void {\r\n        if(phone.length === 0) {\r\n            setPhone('+7(')\r\n        }\r\n        console.log(phone, payment)\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            <label htmlFor={props.name}/>\r\n            <input\r\n                id={props.id}\r\n                name={props.name}\r\n                type={props.type}\r\n                value={inputValue}\r\n                placeholder={props.placeholder}\r\n                onChange={(e:React.ChangeEvent<HTMLInputElement>) => {handleUserInput(e)}}\r\n                onClick={()=> {props.additionalFunc()}}\r\n                onFocus={()=> {props.additionalFunc(inputValue)}}\r\n            />\r\n            <div>ошибки</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputForm"]},"metadata":{},"sourceType":"module"}