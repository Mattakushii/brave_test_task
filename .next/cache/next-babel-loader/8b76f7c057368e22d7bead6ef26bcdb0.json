{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\GitHub\\\\brave_test_task\\\\src\\\\pages\\\\pay\\\\[payOperatorID].js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffec } from 'react';\nimport { PaymentContainer, InputBlock, Input } from '../../components/PaymentPageStyled';\nimport FormInput from '../../components/inputComponent/FormInput';\n\nvar PaymentPage = function PaymentPage(_ref) {\n  _s();\n\n  var data = _ref.data;\n\n  //для избежания предупреждения useLayoutEffect на стороне сервера\n  var _useState = useState(false),\n      showChild = _useState[0],\n      setShowChild = _useState[1];\n\n  useEffect(function () {\n    setShowChild(true);\n  }, []); //добавить логические состояния validphone validpayment чтобы включать выключать кнопку\n\n  var _useState2 = useState(''),\n      phone = _useState2[0],\n      setPhone = _useState2[1];\n\n  var _useState3 = useState(false),\n      validPhone = _useState3[0],\n      setValidPhone = _useState3[1];\n\n  var _useState4 = useState(''),\n      payment = _useState4[0],\n      setPayment = _useState4[1];\n\n  var _useState5 = useState(false),\n      validPayment = _useState5[0],\n      setValidPayment = _useState5[1];\n\n  var _useState6 = useState(false),\n      validForm = _useState6[0],\n      setValidForm = _useState6[1]; //сделать логику для отключения кнопки\n\n\n  function sendData(e) {\n    console.log('work');\n    e.preventDefault();\n  }\n\n  if (data && data.id) {\n    return __jsx(PaymentContainer, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    }, __jsx(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }\n    }, \"\\u041E\\u043F\\u043B\\u0430\\u0442\\u0430 \", data.operatorName), __jsx(\"form\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }\n    }, __jsx(InputBlock, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"phone\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 25\n      }\n    }, \"\\u041D\\u043E\\u043C\\u0435\\u0440 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\\u0430\"), __jsx(Input, {\n      id: \"phone\",\n      value: \"phone\",\n      type: \"tel\",\n      mask: \"+7(999)-999-99-99\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 25\n      }\n    }), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 25\n      }\n    }, \"\\u041E\\u0442\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0430 \\u043E\\u0448\\u0438\\u0431\\u043E\\u043A\")), __jsx(\"input\", {\n      type: \"submit\",\n      value: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\",\n      onClick: function onClick(e) {\n        sendData(e);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }\n    })));\n  } else {\n    return __jsx(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 12\n      }\n    }, data.errMessage);\n  }\n};\n\n_s(PaymentPage, \"xgoWxAE1uZ4KUmsy679R8sPxnrw=\");\n\n_c = PaymentPage;\n\nPaymentPage.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var res, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(\"http://localhost:3000/api/operators/\".concat(ctx.query.payOperatorID));\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return res.json();\n\n          case 5:\n            data = _context.sent;\n            return _context.abrupt(\"return\", {\n              data: data\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default PaymentPage;\nvar validationPhoneEvents = {\n  valid: {\n    value: 'Верно!!!',\n    bool: true\n  },\n  invalid: {\n    value: 'Заполните поле до конца',\n    bool: false\n  }\n};\nvar validationPaymentEvents = {\n  valid: {\n    value: 'Верно!!!',\n    bool: true\n  },\n  invalid: {\n    value: 'Введите сумму от 1 до 1000 рублей',\n    bool: false\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentPage\");","map":{"version":3,"sources":["C:/GitHub/brave_test_task/src/pages/pay/[payOperatorID].js"],"names":["useState","useEffec","PaymentContainer","InputBlock","Input","FormInput","PaymentPage","data","showChild","setShowChild","useEffect","phone","setPhone","validPhone","setValidPhone","payment","setPayment","validPayment","setValidPayment","validForm","setValidForm","sendData","e","console","log","preventDefault","id","operatorName","errMessage","getInitialProps","ctx","fetch","query","payOperatorID","res","json","validationPhoneEvents","valid","value","bool","invalid","validationPaymentEvents"],"mappings":"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","sourcesContent":["import {useState, useEffec} from 'react'; \r\nimport {PaymentContainer, InputBlock,Input} from '../../components/PaymentPageStyled';\r\nimport FormInput from '../../components/inputComponent/FormInput'\r\n\r\nconst PaymentPage = ({data}) => {\r\n\r\n    //для избежания предупреждения useLayoutEffect на стороне сервера\r\n    const [showChild, setShowChild] = useState(false);\r\n    useEffect(() => { setShowChild(true) }, []);\r\n\r\n    //добавить логические состояния validphone validpayment чтобы включать выключать кнопку\r\n    const [phone, setPhone] = useState('');\r\n    const [validPhone, setValidPhone] = useState(false);\r\n    const [payment, setPayment] = useState('');\r\n    const [validPayment, setValidPayment] = useState(false);\r\n    const [validForm, setValidForm] = useState(false)\r\n    //сделать логику для отключения кнопки\r\n\r\n\r\n    function sendData(e) {\r\n        console.log('work');\r\n        e.preventDefault();\r\n    }\r\n\r\n    if (data && data.id) {\r\n        return (\r\n            <PaymentContainer>  \r\n                <h1>Оплата {data.operatorName}</h1>    \r\n                <form>\r\n                    <InputBlock>\r\n                        <label htmlFor=\"phone\">Номер телефона</label>\r\n                        <Input \r\n                            id=\"phone\" \r\n                            value=\"phone\" \r\n                            type=\"tel\"\r\n                            mask=\"+7(999)-999-99-99\"\r\n                        />\r\n                        <div>Отработка ошибок</div>\r\n                    </InputBlock>\r\n                    \r\n                    <input type=\"submit\" value=\"Отправить\" onClick={(e)=> {sendData(e)}}></input>\r\n                </form>\r\n            </PaymentContainer>\r\n        )\r\n    } else {\r\n    return <h1>{data.errMessage}</h1>\r\n    }\r\n}\r\n\r\nPaymentPage.getInitialProps = async (ctx) => {\r\n    const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\r\n    const data = await res.json();\r\n    return { data }\r\n}\r\n\r\nexport default PaymentPage\r\n\r\nconst validationPhoneEvents = {\r\n    valid: {\r\n        value: 'Верно!!!', \r\n        bool: true\r\n    },\r\n    invalid: {\r\n        value: 'Заполните поле до конца',\r\n        bool: false\r\n    }\r\n}\r\n\r\nconst validationPaymentEvents = {\r\n    valid: {\r\n        value: 'Верно!!!', \r\n        bool: true\r\n    },\r\n    invalid: {\r\n        value: 'Введите сумму от 1 до 1000 рублей',\r\n        bool: false\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}