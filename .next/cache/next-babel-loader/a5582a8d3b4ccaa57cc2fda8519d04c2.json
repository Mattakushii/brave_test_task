{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\GitHub\\\\brave_test_task\\\\src\\\\pages\\\\pay\\\\[payOperatorID].js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { PaymentContainer, Input, InputBlock, Inputs } from '../../components/PaymentPageStyled';\nimport FormInput from '../../components/inputComponent/FormInput';\n\nvar PaymentPage = function PaymentPage(_ref) {\n  _s();\n\n  var data = _ref.data;\n\n  var _useState = useState(''),\n      phone = _useState[0],\n      setPhone = _useState[1];\n\n  var _useState2 = useState(''),\n      payment = _useState2[0],\n      setPayment = _useState2[1];\n\n  function sendData(e) {\n    //проверяет наличие телефона и суммы оплаты, если ок, то отправляет запрос на фейк апи\n    e.preventDefault();\n\n    if (phone && payment) {\n      console.log(phone, payment);\n    } else {\n      alert('Заполните все поля!');\n    }\n  }\n\n  function handlePhoneChange(e) {\n    setPhone(e.target.value);\n  }\n\n  function handlePaymentChange(e) {\n    setPayment(e.target.value);\n    validatePayment(e.target.value);\n  } //убирает из строки телефона все лишние символы\n\n\n  function validatePhone(str) {\n    var regExp = /\\d/g;\n    var validatedArr = str.match(regExp);\n    var validated = validatedArr.join('');\n    return validated;\n  } //проверяет введенную сумму на заданные параметры range = [1, 1000] если ок, то обновляет состояние\n\n\n  function validatePayment(str, range) {\n    var num = str * 0;\n\n    if (num >= 1 || num <= 1000) {\n      console.log('valid');\n    } else {\n      console.log('invalid');\n    }\n  }\n\n  if (data && data.id) {\n    return __jsx(PaymentContainer, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, __jsx(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    }, \"\\u041E\\u043F\\u043B\\u0430\\u0442\\u0430 \", data.operatorName), __jsx(\"form\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, __jsx(InputBlock, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"payment\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 25\n      }\n    }, \"\\u0421\\u0443\\u043C\\u043C\\u0430 \\u043F\\u043B\\u0430\\u0442\\u0435\\u0436\\u0430\"), __jsx(Input, {\n      mask: \"9999\",\n      id: \"payment\",\n      type: \"text\",\n      onChange: function onChange(e) {\n        handlePaymentChange(e);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 25\n      }\n    }), __jsx(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }\n    })), __jsx(\"input\", {\n      type: \"submit\",\n      value: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\",\n      onClick: function onClick(e) {\n        sendData(e);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    })));\n  } else {\n    return __jsx(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 12\n      }\n    }, data.errMessage);\n  }\n};\n\n_s(PaymentPage, \"e+yOXp1mK44Fg2fQd9b+/hNWHX0=\");\n\n_c = PaymentPage;\n\nPaymentPage.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var res, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(\"http://localhost:3000/api/operators/\".concat(ctx.query.payOperatorID));\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return res.json();\n\n          case 5:\n            data = _context.sent;\n            return _context.abrupt(\"return\", {\n              data: data\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default PaymentPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentPage\");","map":{"version":3,"sources":["C:/GitHub/brave_test_task/src/pages/pay/[payOperatorID].js"],"names":["useState","useEffect","PaymentContainer","Input","InputBlock","Inputs","FormInput","PaymentPage","data","phone","setPhone","payment","setPayment","sendData","e","preventDefault","console","log","alert","handlePhoneChange","target","value","handlePaymentChange","validatePayment","validatePhone","str","regExp","validatedArr","match","validated","join","range","num","id","operatorName","errMessage","getInitialProps","ctx","fetch","query","payOperatorID","res","json"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react'; \r\nimport {PaymentContainer, Input, InputBlock, Inputs} from '../../components/PaymentPageStyled';\r\nimport FormInput from '../../components/inputComponent/FormInput'\r\n\r\nconst PaymentPage = ({data}) => {\r\n\r\n    const [phone, setPhone] = useState('');\r\n    const [payment, setPayment] = useState('');\r\n\r\n\r\n    function sendData(e) {\r\n        //проверяет наличие телефона и суммы оплаты, если ок, то отправляет запрос на фейк апи\r\n        e.preventDefault();\r\n        if(phone && payment) {\r\n            console.log(phone, payment);\r\n        } else {alert('Заполните все поля!')}\r\n    }\r\n\r\n    function handlePhoneChange(e) {\r\n        setPhone(e.target.value)\r\n    }\r\n\r\n    function handlePaymentChange(e) {\r\n        setPayment(e.target.value);\r\n        validatePayment(e.target.value);\r\n    }\r\n\r\n    //убирает из строки телефона все лишние символы\r\n    function validatePhone(str) {\r\n        const regExp = /\\d/g;\r\n        const validatedArr =  str.match(regExp);\r\n        const validated = validatedArr.join('');\r\n        return validated;\r\n    }\r\n\r\n    //проверяет введенную сумму на заданные параметры range = [1, 1000] если ок, то обновляет состояние\r\n    function validatePayment(str, range) {\r\n        const num = str*0\r\n        if(num >= 1 || num <= 1000) {\r\n            console.log('valid')\r\n        } else {\r\n            console.log('invalid')\r\n        }\r\n    }\r\n\r\n    \r\n    if (data && data.id) {\r\n        return (\r\n            <PaymentContainer>  \r\n                <h1>Оплата {data.operatorName}</h1>    \r\n                <form>\r\n                    {}\r\n                    <InputBlock>\r\n                        <label htmlFor=\"payment\">Сумма платежа</label>\r\n                        <Input\r\n                            mask=\"9999\"\r\n                            id=\"payment\" \r\n                            type=\"text\"\r\n                            onChange={(e)=>{handlePaymentChange(e)}}>      \r\n                        </Input>\r\n                        <span></span>    \r\n                    </InputBlock>\r\n                    <input type=\"submit\" value=\"Отправить\" onClick={(e)=> {sendData(e)}}></input>\r\n                </form>\r\n            </PaymentContainer>\r\n        )\r\n    } else {\r\n    return <h1>{data.errMessage}</h1>\r\n    }\r\n}\r\n\r\nPaymentPage.getInitialProps = async (ctx) => {\r\n    const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\r\n    const data = await res.json();\r\n    return { data }\r\n}\r\n\r\nexport default PaymentPage"]},"metadata":{},"sourceType":"module"}