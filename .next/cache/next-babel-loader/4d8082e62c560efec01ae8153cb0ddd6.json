{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\brave_test_task\\\\src\\\\pages\\\\pay\\\\[payOperatorID].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport { PaymentContainer, InputBlock, Input, ErrorMessage, PhoneInput } from '../../components/PaymentPageStyled';\n\nconst PaymentPage = ({\n  data\n}) => {\n  //добавить логические состояния validphone validpayment чтобы включать выключать кнопку\n  const {\n    0: phone,\n    1: setPhone\n  } = useState('');\n  const {\n    0: validPhone,\n    1: setIsValidPhone\n  } = useState(false);\n  const {\n    0: payment,\n    1: setPayment\n  } = useState('');\n  const {\n    0: validPayment,\n    1: setIsValidPayment\n  } = useState(false);\n  const {\n    0: validForm,\n    1: setIsValidForm\n  } = useState(false);\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({\n    phone: '',\n    payment: ''\n  }); //сделать логику для отключения кнопки\n\n  function handleUserInput(e) {\n    const inputName = e.target.name;\n    const value = e.target.value;\n\n    switch (inputName) {\n      case 'phone':\n        setPhone(value);\n        validateFields(inputName, value);\n        console.log(validPhone);\n        break;\n\n      case 'payment':\n        setPayment(value);\n        validateFields(inputName, value);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  function validateFields(fieldName, value) {\n    let validationErrors = errors;\n    let isValidPhone = validPhone;\n    let isValidPayment = validPayment;\n    const phoneRegexp = /\\+7\\s?[\\(]{0,1}9[0-9]{2}[\\)][-]{0,1}\\s?\\d{3}[-]{0,1}\\d{2}[-]{0,1}\\d{2}/;\n    const paymentRegexp = /^\\d+$/;\n    const letterRegexp = /[а-яА-ЯёЁa-zA-Z]+$/;\n\n    switch (fieldName) {\n      case 'phone':\n        if (value.length < phone.length) {\n          setPhone(value);\n          setIsValidPhone(false);\n          validationErrors.phone = 'Поле должно быть заполено';\n        } else {\n          if (value.length == 7) {\n            let [...val] = value;\n            val.splice(6, 0, ')', '-');\n            setPhone(val.join(''));\n          }\n\n          if (value.length == 12) {\n            let [...val] = value;\n            val.splice(11, 0, '-');\n            setPhone(val.join(''));\n          }\n\n          if (value.length == 15) {\n            let [...val] = value;\n            val.splice(14, 0, '-');\n            setPhone(val.join(''));\n          }\n\n          if (value.length >= 17) {\n            const blockedValue = value.slice(0, 17);\n            setPhone(blockedValue);\n          }\n        }\n\n        if (phoneRegexp.test(value)) {\n          isValidPhone = true;\n          validationErrors.phone = '';\n        } else if (value.match(letterRegexp)) {\n          isValidPhone = false;\n          validationErrors.phone = 'Поле должно содержать только цифры';\n        } else {\n          isValidPhone = false;\n          validationErrors.phone = 'Поле должно быть заполено';\n        }\n\n        break;\n\n      case 'payment':\n        console.log(value);\n\n        if (value == '') {\n          isValidPayment = false;\n          validationErrors.payment = 'Введите сумму в заданных границах (от 1р до 1000р)';\n        } else if (paymentRegexp.test(value)) {\n          const val = value * 1;\n\n          if (val >= 1 && val <= 1000) {\n            isValidPayment = true;\n            validationErrors.payment = '';\n          } else {\n            isValidPayment = false;\n            validationErrors.payment = 'Введите сумму в заданных границах (от 1р до 1000р)';\n          }\n        } else {\n          isValidPayment = false;\n          validationErrors.payment = 'Поле содержит недопустимые символы';\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    setIsValidPhone(isValidPhone);\n    setIsValidPayment(isValidPayment);\n    setErrors(validationErrors);\n\n    if (isValidPhone && isValidPayment) {\n      setIsValidForm(true);\n    } else {\n      setIsValidForm(false);\n    }\n  }\n\n  function passFirstValue() {\n    if (phone.length == 0) {\n      setPhone('+7(');\n    }\n  }\n\n  function sendData(e) {\n    //отправить данные на апи\n    e.preventDefault();\n  }\n\n  if (data && data.id) {\n    return __jsx(PaymentContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }, \"\\u041E\\u043F\\u043B\\u0430\\u0442\\u0430 \", data.operatorName), __jsx(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }, __jsx(InputBlock, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"phone\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 25\n      }\n    }, \"\\u041D\\u043E\\u043C\\u0435\\u0440 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\\u0430\"), __jsx(PhoneInput, {\n      validPhone: true,\n      id: \"phone\",\n      name: \"phone\",\n      value: phone,\n      type: \"tel\",\n      placeholder: \"+7(999)-999-99-99\",\n      onChange: e => handleUserInput(e),\n      onClick: () => passFirstValue(),\n      onFocus: () => passFirstValue(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }\n    }), __jsx(ErrorMessage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 25\n      }\n    }, errors.phone)), __jsx(InputBlock, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"payment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 25\n      }\n    }, \"\\u0421\\u0443\\u043C\\u043C\\u0430 \\u043F\\u043B\\u0430\\u0442\\u0435\\u0436\\u0430\"), __jsx(Input, {\n      validPayment: true,\n      id: \"payment\",\n      name: \"payment\",\n      value: payment,\n      type: \"text\",\n      placeholder: \"\\u0421\\u0443\\u043C\\u043C\\u0430 \\u043E\\u0442 1 \\u0434\\u043E 1000\\u0440\",\n      onChange: e => handleUserInput(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 25\n      }\n    }), __jsx(ErrorMessage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 25\n      }\n    }, errors.payment)), __jsx(\"input\", {\n      disabled: !validForm,\n      type: \"submit\",\n      value: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\",\n      onClick: e => {\n        sendData(e);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }\n    })));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 16\n      }\n    }, data.errMessage);\n  }\n};\n\nPaymentPage.getInitialProps = async ctx => {\n  const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\n  const data = await res.json();\n  return {\n    data\n  };\n};\n\nexport default PaymentPage;","map":{"version":3,"sources":["C:/GitHub/brave_test_task/src/pages/pay/[payOperatorID].js"],"names":["useState","PaymentContainer","InputBlock","Input","ErrorMessage","PhoneInput","PaymentPage","data","phone","setPhone","validPhone","setIsValidPhone","payment","setPayment","validPayment","setIsValidPayment","validForm","setIsValidForm","errors","setErrors","handleUserInput","e","inputName","target","name","value","validateFields","console","log","fieldName","validationErrors","isValidPhone","isValidPayment","phoneRegexp","paymentRegexp","letterRegexp","length","val","splice","join","blockedValue","slice","test","match","passFirstValue","sendData","preventDefault","id","operatorName","errMessage","getInitialProps","ctx","res","fetch","query","payOperatorID","json"],"mappings":"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","sourcesContent":["import {useState} from 'react'; \r\nimport {PaymentContainer, InputBlock, Input, ErrorMessage, PhoneInput} from '../../components/PaymentPageStyled';\r\n\r\nconst PaymentPage = ({data}) => {\r\n    //добавить логические состояния validphone validpayment чтобы включать выключать кнопку\r\n    const [phone, setPhone] = useState('');\r\n    const [validPhone, setIsValidPhone] = useState(false);\r\n    const [payment, setPayment] = useState('');\r\n    const [validPayment, setIsValidPayment] = useState(false);\r\n    const [validForm, setIsValidForm] = useState(false);\r\n    const [errors, setErrors] = useState({\r\n        phone: '',\r\n        payment: '',\r\n    })\r\n    //сделать логику для отключения кнопки\r\n\r\n    function handleUserInput(e) {\r\n        const inputName = e.target.name;\r\n        const value = e.target.value;\r\n        switch(inputName) {\r\n            case 'phone':\r\n                setPhone(value);\r\n                validateFields(inputName, value);\r\n                console.log(validPhone)\r\n                break;\r\n            case 'payment':\r\n                setPayment(value);\r\n                validateFields(inputName, value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    function validateFields(fieldName, value) {\r\n        let validationErrors = errors;\r\n        let isValidPhone = validPhone;\r\n        let isValidPayment = validPayment;\r\n        const phoneRegexp = /\\+7\\s?[\\(]{0,1}9[0-9]{2}[\\)][-]{0,1}\\s?\\d{3}[-]{0,1}\\d{2}[-]{0,1}\\d{2}/;\r\n        const paymentRegexp = /^\\d+$/;\r\n        const letterRegexp = /[а-яА-ЯёЁa-zA-Z]+$/;\r\n\r\n        switch(fieldName) {\r\n            case 'phone':\r\n                if(value.length < phone.length) {\r\n                    setPhone(value);\r\n                    setIsValidPhone(false);\r\n                    validationErrors.phone = 'Поле должно быть заполено';\r\n                }else {\r\n                    if(value.length == 7) {\r\n                        let [...val] = value;\r\n                        val.splice(6, 0, ')', '-');\r\n                        setPhone(val.join(''))\r\n                    }\r\n                    if(value.length == 12) {\r\n                        let [...val] = value;\r\n                        val.splice(11, 0, '-');\r\n                        setPhone(val.join(''))\r\n                    }\r\n                    if(value.length == 15) {\r\n                        let [...val] = value;\r\n                        val.splice(14, 0, '-');\r\n                        setPhone(val.join(''))\r\n                    }\r\n                    if(value.length >= 17) {\r\n                        const blockedValue = value.slice(0, 17)\r\n                        setPhone(blockedValue)\r\n                    }\r\n                }\r\n                if(phoneRegexp.test(value)) {\r\n                    isValidPhone = true;\r\n                    validationErrors.phone = ''\r\n                } else if(value.match(letterRegexp)){\r\n                    isValidPhone = false;\r\n                    validationErrors.phone = 'Поле должно содержать только цифры'\r\n                } else{\r\n                    isValidPhone = false;\r\n                    validationErrors.phone = 'Поле должно быть заполено'\r\n                }\r\n                break;\r\n            case 'payment':\r\n                console.log(value)\r\n                if(value == '') {\r\n                    isValidPayment = false;\r\n                    validationErrors.payment = 'Введите сумму в заданных границах (от 1р до 1000р)'\r\n                } else if (paymentRegexp.test(value)) {\r\n                    const val = value * 1;\r\n                    if (val >= 1 && val <= 1000) {\r\n                        isValidPayment = true;\r\n                        validationErrors.payment = ''\r\n                    } else {\r\n                        isValidPayment = false;\r\n                        validationErrors.payment = 'Введите сумму в заданных границах (от 1р до 1000р)'\r\n                    }\r\n                } else {\r\n                    isValidPayment = false;\r\n                    validationErrors.payment = 'Поле содержит недопустимые символы'\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        setIsValidPhone(isValidPhone);\r\n        setIsValidPayment(isValidPayment);\r\n        setErrors(validationErrors);\r\n        if(isValidPhone && isValidPayment) {\r\n            setIsValidForm(true);\r\n        } else {\r\n            setIsValidForm(false);\r\n        }\r\n    }\r\n\r\n    function passFirstValue() {\r\n        if(phone.length == 0) {\r\n            setPhone('+7(')\r\n        }\r\n    }\r\n\r\n    function sendData(e) {\r\n        //отправить данные на апи\r\n        e.preventDefault();\r\n    }\r\n    \r\n    if (data && data.id) {\r\n        return (\r\n            <PaymentContainer>  \r\n                <h1>Оплата {data.operatorName}</h1>    \r\n                <form>\r\n                    <InputBlock>\r\n                        <label htmlFor=\"phone\">Номер телефона</label>\r\n                        <PhoneInput validPhone\r\n                            id=\"phone\"\r\n                            name=\"phone\"\r\n                            value={phone} \r\n                            type=\"tel\"\r\n                            placeholder=\"+7(999)-999-99-99\"\r\n                            onChange={(e)=> handleUserInput(e)}\r\n                            onClick={()=> passFirstValue()}\r\n                            onFocus={()=> passFirstValue()}\r\n                        ></PhoneInput>\r\n                        <ErrorMessage>{errors.phone}</ErrorMessage>\r\n                    </InputBlock>\r\n                    <InputBlock>\r\n                        <label htmlFor=\"payment\">Сумма платежа</label>\r\n                        <Input validPayment\r\n                            id=\"payment\"\r\n                            name=\"payment\"\r\n                            value={payment} \r\n                            type=\"text\"\r\n                            placeholder=\"Сумма от 1 до 1000р\"\r\n                            onChange={(e)=> handleUserInput(e)}\r\n                        ></Input>\r\n                        <ErrorMessage>{errors.payment}</ErrorMessage>\r\n                    </InputBlock>\r\n                    \r\n                    <input disabled={!validForm} type=\"submit\" value=\"Отправить\" onClick={(e)=> {sendData(e)}}></input>\r\n                </form>\r\n            </PaymentContainer>\r\n        )\r\n    } else {\r\n        return <h1>{data.errMessage}</h1>\r\n    }\r\n}\r\n\r\nPaymentPage.getInitialProps = async (ctx) => {\r\n    const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\r\n    const data = await res.json();\r\n    return { data }\r\n}\r\n\r\nexport default PaymentPage"]},"metadata":{},"sourceType":"module"}