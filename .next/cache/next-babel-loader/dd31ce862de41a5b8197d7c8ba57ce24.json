{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\GitHub\\\\brave_test_task\\\\src\\\\pages\\\\pay\\\\[payOperatorID].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { useRouter } from \"next/router\";\nimport { PaymentContainer, InputBlock, ErrorMessage, Input } from '../../components/PaymentPageStyled';\n\nvar PaymentPage = function PaymentPage(_ref) {\n  _s();\n\n  var operatorData = _ref.operatorData;\n  var router = useRouter();\n\n  var _useState = useState(''),\n      phone = _useState[0],\n      setPhone = _useState[1];\n\n  var _useState2 = useState(false),\n      validPhone = _useState2[0],\n      setIsValidPhone = _useState2[1];\n\n  var _useState3 = useState(''),\n      payment = _useState3[0],\n      setPayment = _useState3[1];\n\n  var _useState4 = useState(false),\n      validPayment = _useState4[0],\n      setIsValidPayment = _useState4[1];\n\n  var _useState5 = useState(false),\n      validForm = _useState5[0],\n      setIsValidForm = _useState5[1];\n\n  var _useState6 = useState({\n    phone: '',\n    payment: ''\n  }),\n      errors = _useState6[0],\n      setErrors = _useState6[1];\n\n  var _useState7 = useState({\n    result: false,\n    message: ''\n  }),\n      responseData = _useState7[0],\n      setResponseData = _useState7[1];\n\n  function handleUserInput(e) {\n    var inputName = e.target.name;\n    var value = e.target.value;\n\n    switch (inputName) {\n      case 'phone':\n        setPhone(value);\n        validateFields(inputName, value);\n        break;\n\n      case 'payment':\n        setPayment(value);\n        validateFields(inputName, value);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  function validateFields(fieldName, value) {\n    var validationErrors = errors;\n    var isValidPhone = validPhone;\n    var isValidPayment = validPayment;\n    var phoneRegexp = /\\+7\\s?[\\(]{0,1}9[0-9]{2}[\\)][-]{0,1}\\s?\\d{3}[-]{0,1}\\d{2}[-]{0,1}\\d{2}/;\n    var paymentRegexp = /^\\d+$/;\n    var letterRegexp = /[а-яА-ЯёЁa-zA-Z]+$/;\n\n    switch (fieldName) {\n      case 'phone':\n        if (value.length < phone.length) {\n          setPhone(value);\n          setIsValidPhone(false);\n          validationErrors.phone = 'Поле должно быть заполено';\n        } else {\n          var val = _toConsumableArray(value);\n\n          if (value.length === 7) {\n            val.splice(6, 0, ')', '-');\n            setPhone(val.join(''));\n          }\n\n          if (value.length === 12) {\n            val.splice(11, 0, '-');\n            setPhone(val.join(''));\n          }\n\n          if (value.length === 15) {\n            val.splice(14, 0, '-');\n            setPhone(val.join(''));\n          }\n\n          if (value.length >= 17) {\n            var blockedValue = value.slice(0, 17);\n            setPhone(blockedValue);\n          }\n        }\n\n        if (phoneRegexp.test(value)) {\n          isValidPhone = true;\n          validationErrors.phone = '';\n        } else if (value.match(letterRegexp)) {\n          isValidPhone = false;\n          validationErrors.phone = 'Поле должно содержать только цифры';\n        } else {\n          isValidPhone = false;\n          validationErrors.phone = 'Поле должно быть заполено';\n        }\n\n        break;\n\n      case 'payment':\n        if (value === '') {\n          isValidPayment = false;\n          validationErrors.payment = 'Введите сумму в заданных границах (от 1р до 1000р)';\n        } else if (paymentRegexp.test(value)) {\n          var _val = parseInt(value);\n\n          if (_val >= 1 && _val <= 1000) {\n            isValidPayment = true;\n            validationErrors.payment = '';\n          } else {\n            isValidPayment = false;\n            validationErrors.payment = 'Введите сумму в заданных границах (от 1р до 1000р)';\n          }\n        } else {\n          isValidPayment = false;\n          validationErrors.payment = 'Поле содержит недопустимые символы';\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    setIsValidPhone(isValidPhone);\n    setIsValidPayment(isValidPayment);\n    setErrors(validationErrors);\n\n    if (isValidPhone && isValidPayment) {\n      setIsValidForm(true);\n    } else {\n      setIsValidForm(false);\n    }\n  }\n\n  function passFirstValue() {\n    if (phone.length === 0) {\n      setPhone('+7(');\n    }\n  }\n\n  function sendData(_x) {\n    return _sendData.apply(this, arguments);\n  }\n\n  function _sendData() {\n    _sendData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var phoneArr, validPhone, reqBody, req, res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              phoneArr = phone.match(/\\d/g);\n              validPhone = phoneArr === null || phoneArr === void 0 ? void 0 : phoneArr.join('');\n              reqBody = {\n                phoneNumber: validPhone,\n                payment: payment,\n                operatorName: operatorData.data.operatorName\n              };\n              setResponseData({\n                result: false,\n                message: 'Обработка платежа...'\n              });\n              _context.next = 7;\n              return fetch(\"http://localhost:3000/api/pay\", {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n              });\n\n            case 7:\n              req = _context.sent;\n              _context.next = 10;\n              return req.json();\n\n            case 10:\n              res = _context.sent;\n              setResponseData(res);\n              setTimeout(function () {\n                redirect(res.result);\n              }, 1000);\n              return _context.abrupt(\"return\", res);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _sendData.apply(this, arguments);\n  }\n\n  function redirect(result) {\n    if (result) {\n      router.replace('/');\n    } else {\n      setPhone('');\n      setIsValidPhone(false);\n      setPayment('');\n      setIsValidPayment(false);\n      setIsValidForm(false);\n    }\n  }\n\n  if (operatorData && operatorData.data.id) {\n    return __jsx(PaymentContainer, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }\n    }, __jsx(\"form\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }\n    }, __jsx(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }\n    }, \"\\u041E\\u043F\\u043B\\u0430\\u0442\\u0430 \", operatorData.data.operatorName), __jsx(InputBlock, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"phone\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 25\n      }\n    }, \"\\u041D\\u043E\\u043C\\u0435\\u0440 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\\u0430\"), __jsx(Input, {\n      valid: validPhone,\n      id: \"phone\",\n      name: \"phone\",\n      value: phone,\n      type: \"tel\",\n      placeholder: \"+7(999)-999-99-99\",\n      onChange: function onChange(e) {\n        return handleUserInput(e);\n      },\n      onClick: function onClick() {\n        return passFirstValue();\n      },\n      onFocus: function onFocus() {\n        return passFirstValue();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 25\n      }\n    }), __jsx(ErrorMessage, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 25\n      }\n    }, errors.phone)), __jsx(InputBlock, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"payment\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 25\n      }\n    }, \"\\u0421\\u0443\\u043C\\u043C\\u0430 \\u043F\\u043B\\u0430\\u0442\\u0435\\u0436\\u0430\"), __jsx(Input, {\n      valid: validPayment,\n      id: \"payment\",\n      name: \"payment\",\n      value: payment,\n      type: \"text\",\n      placeholder: \"\\u0421\\u0443\\u043C\\u043C\\u0430 \\u043E\\u0442 1 \\u0434\\u043E 1000\\u0440\",\n      onChange: function onChange(e) {\n        return handleUserInput(e);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 25\n      }\n    }), __jsx(ErrorMessage, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 25\n      }\n    }, errors.payment)), __jsx(\"input\", {\n      disabled: !validForm,\n      type: \"submit\",\n      value: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\",\n      onClick: function onClick(e) {\n        sendData(e);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 21\n      }\n    })), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }\n    }, responseData.message));\n  } else {\n    return __jsx(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 16\n      }\n    }, operatorData === null || operatorData === void 0 ? void 0 : operatorData.errMessage);\n  }\n};\n\n_s(PaymentPage, \"pPmuWD7OEwqVfvY3RVSbPssMqEY=\", false, function () {\n  return [useRouter];\n});\n\n_c = PaymentPage;\n\nPaymentPage.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ctx) {\n    var res, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch(\"http://localhost:3000/api/operators/\".concat(ctx.query.payOperatorID));\n\n          case 2:\n            res = _context2.sent;\n            _context2.next = 5;\n            return res.json();\n\n          case 5:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              operatorData: data\n            });\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default PaymentPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentPage\");","map":{"version":3,"sources":["C:/GitHub/brave_test_task/src/pages/pay/[payOperatorID].tsx"],"names":["React","useState","useRouter","PaymentContainer","InputBlock","ErrorMessage","Input","PaymentPage","operatorData","router","phone","setPhone","validPhone","setIsValidPhone","payment","setPayment","validPayment","setIsValidPayment","validForm","setIsValidForm","errors","setErrors","result","message","responseData","setResponseData","handleUserInput","e","inputName","target","name","value","validateFields","fieldName","validationErrors","isValidPhone","isValidPayment","phoneRegexp","paymentRegexp","letterRegexp","length","val","splice","join","blockedValue","slice","test","match","parseInt","passFirstValue","sendData","preventDefault","phoneArr","reqBody","phoneNumber","operatorName","data","fetch","method","headers","body","JSON","stringify","req","json","res","setTimeout","redirect","replace","id","errMessage","getInitialProps","ctx","query","payOperatorID"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport {NextRouter, useRouter} from \"next/router\";\r\nimport {NextPageContext} from 'next';\r\nimport {\r\n    PaymentContainer,\r\n    InputBlock,\r\n    ErrorMessage,\r\n    Input,\r\n} from '../../components/PaymentPageStyled';\r\n\r\ninterface PaymentProps {\r\n    operatorData: OperatorData | undefined\r\n}\r\n\r\ninterface test extends NextRouter {\r\n    operatorName: string\r\n}\r\n\r\ninterface SendingData {\r\n    phoneNumber: string | undefined,\r\n    payment: string,\r\n    operatorName: string\r\n}\r\n\r\nconst PaymentPage = ({operatorData}: PaymentProps) => {\r\n    const router = useRouter();\r\n\r\n    const [phone, setPhone] = useState('');\r\n    const [validPhone, setIsValidPhone] = useState(false);\r\n    const [payment, setPayment] = useState('');\r\n    const [validPayment, setIsValidPayment] = useState(false);\r\n    const [validForm, setIsValidForm] = useState(false);\r\n    const [errors, setErrors] = useState({\r\n        phone: '',\r\n        payment: '',\r\n    })\r\n    const [responseData, setResponseData] = useState({\r\n        result: false,\r\n        message:''\r\n    })\r\n\r\n    function handleUserInput(e : React.ChangeEvent<HTMLInputElement>) {\r\n        const inputName = e.target.name;\r\n        const value = e.target.value;\r\n        switch(inputName) {\r\n            case 'phone':\r\n                setPhone(value);\r\n                validateFields(inputName, value);\r\n\r\n                break;\r\n            case 'payment':\r\n                setPayment(value);\r\n                validateFields(inputName, value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    function validateFields(fieldName: string, value : string ) {\r\n        let validationErrors = errors;\r\n        let isValidPhone = validPhone;\r\n        let isValidPayment = validPayment;\r\n        const phoneRegexp = /\\+7\\s?[\\(]{0,1}9[0-9]{2}[\\)][-]{0,1}\\s?\\d{3}[-]{0,1}\\d{2}[-]{0,1}\\d{2}/;\r\n        const paymentRegexp = /^\\d+$/;\r\n        const letterRegexp = /[а-яА-ЯёЁa-zA-Z]+$/;\r\n\r\n        switch(fieldName) {\r\n            case 'phone':\r\n                if(value.length < phone.length) {\r\n                    setPhone(value);\r\n                    setIsValidPhone(false);\r\n                    validationErrors.phone = 'Поле должно быть заполено';\r\n                }else {\r\n                    let val = [...value];\r\n                    if(value.length === 7) {\r\n                        val.splice(6, 0, ')', '-');\r\n                        setPhone(val.join(''))\r\n                    }\r\n                    if(value.length === 12) {\r\n                        val.splice(11, 0, '-');\r\n                        setPhone(val.join(''))\r\n                    }\r\n                    if(value.length === 15) {\r\n                        val.splice(14, 0, '-');\r\n                        setPhone(val.join(''))\r\n                    }\r\n                    if(value.length >= 17) {\r\n                        const blockedValue = value.slice(0, 17)\r\n                        setPhone(blockedValue)\r\n                    }\r\n                }\r\n                if(phoneRegexp.test(value)) {\r\n                    isValidPhone = true;\r\n                    validationErrors.phone = ''\r\n                } else if(value.match(letterRegexp)){\r\n                    isValidPhone = false;\r\n                    validationErrors.phone = 'Поле должно содержать только цифры'\r\n                } else{\r\n                    isValidPhone = false;\r\n                    validationErrors.phone = 'Поле должно быть заполено'\r\n                }\r\n                break;\r\n            case 'payment':\r\n                if(value === '') {\r\n                    isValidPayment = false;\r\n                    validationErrors.payment = 'Введите сумму в заданных границах (от 1р до 1000р)'\r\n                } else if (paymentRegexp.test(value)) {\r\n                    const val = parseInt(value);\r\n                    if (val >= 1 && val <= 1000) {\r\n                        isValidPayment = true;\r\n                        validationErrors.payment = ''\r\n                    } else {\r\n                        isValidPayment = false;\r\n                        validationErrors.payment = 'Введите сумму в заданных границах (от 1р до 1000р)'\r\n                    }\r\n                } else {\r\n                    isValidPayment = false;\r\n                    validationErrors.payment = 'Поле содержит недопустимые символы'\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        setIsValidPhone(isValidPhone);\r\n        setIsValidPayment(isValidPayment);\r\n        setErrors(validationErrors);\r\n        if(isValidPhone && isValidPayment) {\r\n            setIsValidForm(true);\r\n        } else {\r\n            setIsValidForm(false);\r\n        }\r\n    }\r\n\r\n    function passFirstValue() : void {\r\n        if(phone.length === 0) {\r\n            setPhone('+7(')\r\n        }\r\n    }\r\n\r\n    async function sendData(e: React.FormEvent){\r\n        e.preventDefault();\r\n        const phoneArr : RegExpMatchArray | null = phone.match(/\\d/g);\r\n        const validPhone = phoneArr?.join('');\r\n        const reqBody : SendingData = {\r\n            phoneNumber: validPhone,\r\n            payment: payment,\r\n            operatorName: operatorData.data.operatorName\r\n        }\r\n        setResponseData({\r\n            result: false,\r\n            message: 'Обработка платежа...'\r\n        })\r\n        const req = await fetch(\r\n            `http://localhost:3000/api/pay`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(data)\r\n            });\r\n        const res = await req.json();\r\n        setResponseData(res);\r\n        setTimeout(() => {\r\n            redirect(res.result)\r\n        }, 1000);\r\n        return res\r\n    }\r\n\r\n    function redirect(result : object) {\r\n        if(result) {\r\n            router.replace('/');\r\n        } else {\r\n            setPhone('');\r\n            setIsValidPhone(false);\r\n            setPayment('');\r\n            setIsValidPayment(false);\r\n            setIsValidForm(false);\r\n        }\r\n    }\r\n    \r\n    if (operatorData && operatorData.data.id) {\r\n        return (\r\n            <PaymentContainer>\r\n                <form>\r\n                    <h1>Оплата {operatorData.data.operatorName}</h1>\r\n                    <InputBlock>\r\n                        <label htmlFor=\"phone\">Номер телефона</label>\r\n                        <Input\r\n                            valid={validPhone}\r\n                            id=\"phone\"\r\n                            name=\"phone\"\r\n                            value={phone} \r\n                            type=\"tel\"\r\n                            placeholder=\"+7(999)-999-99-99\"\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>)=> handleUserInput(e)}\r\n                            onClick={()=> passFirstValue()}\r\n                            onFocus={()=> passFirstValue()}\r\n                        ></Input>\r\n                        <ErrorMessage>{errors.phone}</ErrorMessage>\r\n                    </InputBlock>\r\n                    <InputBlock>\r\n                        <label htmlFor=\"payment\">Сумма платежа</label>\r\n                        <Input\r\n                            valid={validPayment}\r\n                            id=\"payment\"\r\n                            name=\"payment\"\r\n                            value={payment} \r\n                            type=\"text\"\r\n                            placeholder=\"Сумма от 1 до 1000р\"\r\n                            onChange={(e : React.ChangeEvent<HTMLInputElement>)=> handleUserInput(e)}\r\n                        ></Input>\r\n                        <ErrorMessage>{errors.payment}</ErrorMessage>\r\n                    </InputBlock>\r\n                    \r\n                    <input disabled={!validForm} type=\"submit\" value=\"Отправить\" onClick={(e)=> {sendData(e)}}></input>\r\n                </form>\r\n                <div>{responseData.message}</div>\r\n            </PaymentContainer>\r\n        )\r\n    } else {\r\n        return <h1>{operatorData?.errMessage}</h1>\r\n    }\r\n}\r\n\r\nexport interface OperatorData {\r\n    data: {\r\n        id: string,\r\n        operatorName: string,\r\n        operatorLink: string,\r\n        imgUrl?: string\r\n    },\r\n    errMessage: string,\r\n    ok: boolean\r\n}\r\n\r\nPaymentPage.getInitialProps = async (ctx: NextPageContext) => {\r\n    const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\r\n    const data : OperatorData | undefined = await res.json();\r\n    return { operatorData: data }\r\n}\r\n\r\nexport default PaymentPage"]},"metadata":{},"sourceType":"module"}