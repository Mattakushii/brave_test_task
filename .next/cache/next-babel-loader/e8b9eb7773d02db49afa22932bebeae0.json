{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\brave_test_task\\\\src\\\\pages\\\\pay\\\\[payOperatorID].tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { useRouter } from \"next/router\";\nimport { PaymentContainer, InputBlock, ErrorMessage, Input } from '../../components/PaymentPageStyled';\nimport InputForm from \"../../components/inputFormComponent/InputForm\";\n\nconst PaymentPage = ({\n  operatorData\n}) => {\n  const router = useRouter();\n  const {\n    0: phone,\n    1: setPhone\n  } = useState('');\n  const {\n    0: validPhone,\n    1: setIsValidPhone\n  } = useState(false);\n  const {\n    0: payment,\n    1: setPayment\n  } = useState('');\n  const {\n    0: validPayment,\n    1: setIsValidPayment\n  } = useState(false);\n  const {\n    0: validForm,\n    1: setIsValidForm\n  } = useState(false);\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({\n    phone: '',\n    payment: ''\n  });\n  const {\n    0: responseData,\n    1: setResponseData\n  } = useState({\n    result: false,\n    message: ''\n  });\n  useEffect(() => {\n    if (validPhone && validPayment) {\n      setIsValidForm(true);\n    } else {\n      setIsValidForm(false);\n    }\n  }); //сделать useEffect и обновлять кнопку формы\n\n  async function sendData(e) {\n    e.preventDefault();\n    const phoneArr = phone.match(/\\d/g);\n    const validPhone = phoneArr === null || phoneArr === void 0 ? void 0 : phoneArr.join('');\n    let test = router.query.payOperatorID;\n    console.log(test);\n    const reqBody = {\n      phoneNumber: validPhone,\n      payment: payment,\n      operatorName: operatorData === null || operatorData === void 0 ? void 0 : operatorData.data.operatorName\n    };\n    setResponseData({\n      result: false,\n      message: 'Обработка платежа...'\n    });\n    const req = await fetch(`http://localhost:3000/api/pay`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(reqBody)\n    });\n    const res = await req.json();\n    setResponseData(res);\n    setTimeout(() => {\n      redirect(res.result);\n    }, 1000);\n    return res;\n  }\n\n  function redirect(result) {\n    if (result) {\n      router.replace('/');\n    } else {\n      setPhone('');\n      setIsValidPhone(false);\n      setPayment('');\n      setIsValidPayment(false);\n      setIsValidForm(false);\n    }\n  }\n\n  if (operatorData && operatorData.data.id) {\n    return __jsx(PaymentContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, __jsx(InputForm, {\n      id: \"phone\",\n      name: \"phone\",\n      type: \"tel\",\n      placeholder: \"+7(999)-999-99-99\",\n      callbackValueState: setPhone,\n      callbackValidState: setIsValidPhone,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    }), __jsx(InputForm, {\n      id: \"payment\",\n      name: \"payment\",\n      type: \"text\",\n      placeholder: \"Введите сумму\",\n      callbackValueState: setPayment,\n      callbackValidState: setIsValidPayment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }), __jsx(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }\n    }, \"\\u041E\\u043F\\u043B\\u0430\\u0442\\u0430 \", operatorData.data.operatorName), __jsx(InputBlock, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"phone\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }\n    }, \"\\u041D\\u043E\\u043C\\u0435\\u0440 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\\u0430\"), __jsx(Input, {\n      valid: validPhone,\n      id: \"phone\",\n      name: \"phone\",\n      value: phone,\n      type: \"tel\",\n      placeholder: \"+7(999)-999-99-99\",\n      onChange: e => handleUserInput(e),\n      onClick: () => passFirstValue(),\n      onFocus: () => passFirstValue(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 25\n      }\n    }), __jsx(ErrorMessage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }\n    }, errors.phone)), __jsx(InputBlock, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"payment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 25\n      }\n    }, \"\\u0421\\u0443\\u043C\\u043C\\u0430 \\u043F\\u043B\\u0430\\u0442\\u0435\\u0436\\u0430\"), __jsx(Input, {\n      valid: validPayment,\n      id: \"payment\",\n      name: \"payment\",\n      value: payment,\n      type: \"text\",\n      placeholder: \"\\u0421\\u0443\\u043C\\u043C\\u0430 \\u043E\\u0442 1 \\u0434\\u043E 1000\\u0440\",\n      onChange: e => handleUserInput(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 25\n      }\n    }), __jsx(ErrorMessage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 25\n      }\n    }, errors.payment)), __jsx(\"input\", {\n      disabled: !validForm,\n      type: \"submit\",\n      value: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\",\n      onClick: e => {\n        sendData(e);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }\n    })), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }\n    }, responseData.message));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 16\n      }\n    }, operatorData === null || operatorData === void 0 ? void 0 : operatorData.errMessage);\n  }\n};\n\nPaymentPage.getInitialProps = async ctx => {\n  const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\n  const data = await res.json();\n  return {\n    operatorData: data\n  };\n};\n\nexport default PaymentPage;","map":{"version":3,"sources":["C:/GitHub/brave_test_task/src/pages/pay/[payOperatorID].tsx"],"names":["React","useEffect","useState","useRouter","PaymentContainer","InputBlock","ErrorMessage","Input","InputForm","PaymentPage","operatorData","router","phone","setPhone","validPhone","setIsValidPhone","payment","setPayment","validPayment","setIsValidPayment","validForm","setIsValidForm","errors","setErrors","responseData","setResponseData","result","message","sendData","e","preventDefault","phoneArr","match","join","test","query","payOperatorID","console","log","reqBody","phoneNumber","operatorName","data","req","fetch","method","headers","body","JSON","stringify","res","json","setTimeout","redirect","replace","id","handleUserInput","passFirstValue","errMessage","getInitialProps","ctx"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {useRouter} from \"next/router\";\r\nimport {NextPageContext} from 'next';\r\nimport {\r\n    PaymentContainer,\r\n    InputBlock,\r\n    ErrorMessage,\r\n    Input,\r\n} from '../../components/PaymentPageStyled';\r\nimport InputForm from \"../../components/inputFormComponent/InputForm\";\r\n\r\ninterface PaymentProps {\r\n    operatorData: OperatorData | undefined\r\n}\r\n\r\ninterface SendingData {\r\n    phoneNumber: string | undefined,\r\n    payment: string,\r\n    operatorName: string | undefined\r\n}\r\n\r\nconst PaymentPage = ({operatorData}: PaymentProps) => {\r\n    const router = useRouter();\r\n\r\n    const [phone, setPhone] = useState('');\r\n    const [validPhone, setIsValidPhone] = useState(false);\r\n    const [payment, setPayment] = useState('');\r\n    const [validPayment, setIsValidPayment] = useState(false);\r\n    const [validForm, setIsValidForm] = useState(false);\r\n    const [errors, setErrors] = useState({\r\n        phone: '',\r\n        payment: '',\r\n    })\r\n    const [responseData, setResponseData] = useState({\r\n        result: false,\r\n        message:''\r\n    })\r\n\r\n\r\n    useEffect(()=> {\r\n        if(validPhone && validPayment) {\r\n            setIsValidForm(true);\r\n        } else {\r\n            setIsValidForm(false);\r\n        }\r\n    })\r\n\r\n    //сделать useEffect и обновлять кнопку формы\r\n\r\n    async function sendData(e: React.FormEvent){\r\n        e.preventDefault();\r\n        const phoneArr : RegExpMatchArray | null = phone.match(/\\d/g);\r\n        const validPhone = phoneArr?.join('');\r\n        let test = router.query.payOperatorID;\r\n        console.log(test)\r\n        const reqBody : SendingData = {\r\n            phoneNumber: validPhone,\r\n            payment: payment,\r\n            operatorName: operatorData?.data.operatorName\r\n        }\r\n        setResponseData({\r\n            result: false,\r\n            message: 'Обработка платежа...'\r\n        })\r\n        const req = await fetch(\r\n            `http://localhost:3000/api/pay`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(reqBody)\r\n            });\r\n        const res = await req.json();\r\n        setResponseData(res);\r\n        setTimeout(() => {\r\n            redirect(res.result)\r\n        }, 1000);\r\n        return res\r\n    }\r\n\r\n    function redirect(result : object) {\r\n        if(result) {\r\n            router.replace('/');\r\n        } else {\r\n            setPhone('');\r\n            setIsValidPhone(false);\r\n            setPayment('');\r\n            setIsValidPayment(false);\r\n            setIsValidForm(false);\r\n        }\r\n    }\r\n    \r\n    if (operatorData && operatorData.data.id) {\r\n        return (\r\n            <PaymentContainer>\r\n                <InputForm\r\n                    id={\"phone\"}\r\n                    name={\"phone\"}\r\n                    type={\"tel\"}\r\n                    placeholder={\"+7(999)-999-99-99\"}\r\n                    callbackValueState={setPhone}\r\n                    callbackValidState={setIsValidPhone}\r\n                    />\r\n\r\n                <InputForm\r\n                    id={\"payment\"}\r\n                    name={\"payment\"}\r\n                    type={\"text\"}\r\n                    placeholder={\"Введите сумму\"}\r\n                    callbackValueState={setPayment}\r\n                    callbackValidState={setIsValidPayment}\r\n                />\r\n\r\n\r\n\r\n                <form>\r\n                    <h1>Оплата {operatorData.data.operatorName}</h1>\r\n                    <InputBlock>\r\n                        <label htmlFor=\"phone\">Номер телефона</label>\r\n                        <Input\r\n                            valid={validPhone}\r\n                            id=\"phone\"\r\n                            name=\"phone\"\r\n                            value={phone} \r\n                            type=\"tel\"\r\n                            placeholder=\"+7(999)-999-99-99\"\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>)=> handleUserInput(e)}\r\n                            onClick={()=> passFirstValue()}\r\n                            onFocus={()=> passFirstValue()}\r\n                        />\r\n                        <ErrorMessage>{errors.phone}</ErrorMessage>\r\n                    </InputBlock>\r\n                    <InputBlock>\r\n                        <label htmlFor=\"payment\">Сумма платежа</label>\r\n                        <Input\r\n                            valid={validPayment}\r\n                            id=\"payment\"\r\n                            name=\"payment\"\r\n                            value={payment} \r\n                            type=\"text\"\r\n                            placeholder=\"Сумма от 1 до 1000р\"\r\n                            onChange={(e : React.ChangeEvent<HTMLInputElement>)=> handleUserInput(e)}\r\n                        />\r\n                        <ErrorMessage>{errors.payment}</ErrorMessage>\r\n                    </InputBlock>\r\n                    \r\n                    <input disabled={!validForm} type=\"submit\" value=\"Отправить\" onClick={(e)=> {sendData(e)}}/>\r\n                </form>\r\n                <div>{responseData.message}</div>\r\n            </PaymentContainer>\r\n        )\r\n    } else {\r\n        return <h1>{operatorData?.errMessage}</h1>\r\n    }\r\n}\r\n\r\nexport interface OperatorData {\r\n    data: {\r\n        id: string,\r\n        operatorName: string,\r\n        operatorLink: string,\r\n        imgUrl?: string\r\n    },\r\n    errMessage: string,\r\n    ok: boolean\r\n}\r\n\r\nPaymentPage.getInitialProps = async (ctx: NextPageContext) => {\r\n    const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\r\n    const data : OperatorData | undefined = await res.json();\r\n    return { operatorData: data }\r\n}\r\n\r\nexport default PaymentPage"]},"metadata":{},"sourceType":"module"}