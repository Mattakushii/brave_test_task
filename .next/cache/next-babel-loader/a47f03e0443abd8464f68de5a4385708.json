{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\brave_test_task\\\\src\\\\components\\\\inputComponent\\\\FormInput.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Input, InputBlock } from './FormInputStyled';\nimport { useState, useEffect } from 'react';\n\nconst FormInput = props => {\n  //для избежания предупреждения useLayoutEffect на стороне сервера\n  const {\n    0: showChild,\n    1: setShowChild\n  } = useState(false);\n  const {\n    0: inputValue,\n    1: setInputValue\n  } = useState('');\n  useEffect(() => {\n    setShowChild(true);\n  }, []);\n\n  function handleInputValue(e) {\n    setInputValue(e.target.value);\n    const regexp = props;\n\n    if (props.regExp.test(inputValue)) {\n      console.log(true);\n    } else {\n      console.log(false);\n    }\n  }\n\n  if (!showChild) {\n    return null;\n  } else return __jsx(InputBlock, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, __jsx(\"label\", {\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }, props.labelName), __jsx(Input, {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    mask: props.mask,\n    onChange: e => handleInputValue(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, \"\\u043E\\u0442\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0430 \\u043E\\u0448\\u0438\\u0431\\u043E\\u043A\"));\n};\n\nexport default FormInput;","map":{"version":3,"sources":["C:/GitHub/brave_test_task/src/components/inputComponent/FormInput.js"],"names":["Input","InputBlock","useState","useEffect","FormInput","props","showChild","setShowChild","inputValue","setInputValue","handleInputValue","e","target","value","regexp","regExp","test","console","log","id","labelName","type","placeholder","mask"],"mappings":";;;AAAA,SAAQA,KAAR,EAAeC,UAAf,QAAgC,mBAAhC;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;AAGA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AACzB;AACA,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BL,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACM,UAAD;AAAA,OAAaC;AAAb,MAA8BP,QAAQ,CAAC,EAAD,CAA5C;AACAC,EAAAA,SAAS,CAAC,MAAM;AAAEI,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAAoB,GAA7B,EAA+B,EAA/B,CAAT;;AAEA,WAASG,gBAAT,CAA0BC,CAA1B,EAA6B;AACzBF,IAAAA,aAAa,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb;AACA,UAAMC,MAAM,GAAGT,KAAf;;AACA,QAAGA,KAAK,CAACU,MAAN,CAAaC,IAAb,CAAkBR,UAAlB,CAAH,EAAkC;AAC9BS,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACH,KAFD,MAEO;AACHD,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACH;AACJ;;AAED,MAAI,CAACZ,SAAL,EAAgB;AACZ,WAAO,IAAP;AACH,GAFD,MAEM,OACF,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAED,KAAK,CAACc,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2Bd,KAAK,CAACe,SAAjC,CADJ,EAEI,MAAC,KAAD;AACI,IAAA,EAAE,EAAEf,KAAK,CAACc,EADd;AAEI,IAAA,IAAI,EAAEd,KAAK,CAACgB,IAFhB;AAGI,IAAA,WAAW,EAAEhB,KAAK,CAACiB,WAHvB;AAII,IAAA,IAAI,EAAEjB,KAAK,CAACkB,IAJhB;AAKI,IAAA,QAAQ,EAAGZ,CAAD,IAAMD,gBAAgB,CAACC,CAAD,CALpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mGATJ,CADE;AAaT,CA/BD;;AAiCA,eAAeP,SAAf","sourcesContent":["import {Input, InputBlock} from './FormInputStyled';\r\nimport {useState, useEffect} from 'react';\r\n\r\n\r\nconst FormInput = (props) => { \r\n    //для избежания предупреждения useLayoutEffect на стороне сервера\r\n    const [showChild, setShowChild] = useState(false);\r\n    const [inputValue, setInputValue] = useState('');\r\n    useEffect(() => { setShowChild(true) }, []);\r\n\r\n    function handleInputValue(e) {\r\n        setInputValue(e.target.value);\r\n        const regexp = props\r\n        if(props.regExp.test(inputValue)) {\r\n            console.log(true);\r\n        } else {\r\n            console.log(false);\r\n        }\r\n    }\r\n\r\n    if (!showChild) {\r\n        return null;\r\n    }else return(\r\n        <InputBlock>\r\n            <label htmlFor={props.id}>{props.labelName}</label>\r\n            <Input\r\n                id={props.id}\r\n                type={props.type}\r\n                placeholder={props.placeholder}\r\n                mask={props.mask}\r\n                onChange={(e)=> handleInputValue(e)}>\r\n            </Input>\r\n            <div>отработка ошибок</div>\r\n        </InputBlock>\r\n    )\r\n}\r\n\r\nexport default FormInput"]},"metadata":{},"sourceType":"module"}