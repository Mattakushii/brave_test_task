{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\GitHub\\\\brave_test_task\\\\src\\\\pages\\\\pay\\\\[payOperatorID].js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport { PaymentContainer, Input, InputBlock } from '../../components/PaymentPageStyled';\n\nvar PaymentPage = function PaymentPage(_ref) {\n  _s();\n\n  var data = _ref.data;\n\n  var _useState = useState(''),\n      phone = _useState[0],\n      setPhone = _useState[1];\n\n  var _useState2 = useState(''),\n      payment = _useState2[0],\n      setPayment = _useState2[1];\n\n  function sendData(e) {\n    e.preventDefault();\n  }\n\n  function handlePhoneChange(e) {\n    console.log(e.target.value, typeof e.target.value);\n  }\n\n  func; //написать валидацию для полей\n\n  if (data && data.id) {\n    return __jsx(PaymentContainer, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }\n    }, __jsx(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }\n    }, \"\\u041E\\u043F\\u043B\\u0430\\u0442\\u0430 \", data.operatorName), __jsx(\"form\", {\n      method: \"POST\",\n      action: \"\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }\n    }, __jsx(InputBlock, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"phone\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 25\n      }\n    }, \"\\u041D\\u043E\\u043C\\u0435\\u0440 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\\u0430\"), __jsx(Input, {\n      mask: \"+7(999)999-99-99\",\n      id: \"phone\",\n      type: \"text\",\n      onChange: function onChange(e) {\n        handlePhoneChange(e);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 25\n      }\n    }), __jsx(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 25\n      }\n    })), __jsx(InputBlock, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"payment\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 25\n      }\n    }, \"\\u0421\\u0443\\u043C\\u043C\\u0430 \\u043F\\u043B\\u0430\\u0442\\u0435\\u0436\\u0430\"), __jsx(Input, {\n      mask: \"9999\",\n      id: \"payment\",\n      type: \"text\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 25\n      }\n    }), __jsx(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 25\n      }\n    })), __jsx(\"button\", {\n      onClick: function onClick(e) {\n        sendData(e);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }\n    }, \"go\")));\n  } else {\n    return __jsx(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 12\n      }\n    }, data.errMessage);\n  }\n};\n\n_s(PaymentPage, \"e+yOXp1mK44Fg2fQd9b+/hNWHX0=\");\n\n_c = PaymentPage;\n\nPaymentPage.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var res, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(\"http://localhost:3000/api/operators/\".concat(ctx.query.payOperatorID));\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return res.json();\n\n          case 5:\n            data = _context.sent;\n            return _context.abrupt(\"return\", {\n              data: data\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default PaymentPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentPage\");","map":{"version":3,"sources":["C:/GitHub/brave_test_task/src/pages/pay/[payOperatorID].js"],"names":["useState","PaymentContainer","Input","InputBlock","PaymentPage","data","phone","setPhone","payment","setPayment","sendData","e","preventDefault","handlePhoneChange","console","log","target","value","func","id","operatorName","errMessage","getInitialProps","ctx","fetch","query","payOperatorID","res","json"],"mappings":"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","sourcesContent":["import {useState} from 'react'; \r\nimport {PaymentContainer, Input, InputBlock} from '../../components/PaymentPageStyled';\r\n\r\nconst PaymentPage = ({data}) => {\r\n\r\n    const [phone, setPhone] = useState('');\r\n    const [payment, setPayment] = useState('');\r\n\r\n    function sendData(e) {\r\n        e.preventDefault()\r\n    }\r\n\r\n    function handlePhoneChange(e) {\r\n        console.log(e.target.value, typeof e.target.value);\r\n    }\r\n\r\n    func\r\n\r\n    //написать валидацию для полей\r\n    if(data && data.id) {\r\n        return (\r\n            <PaymentContainer>  \r\n                <h1>Оплата {data.operatorName}</h1>    \r\n                <form method=\"POST\" action=\"\">\r\n                    <InputBlock>\r\n                        <label htmlFor=\"phone\">Номер телефона</label>\r\n                        <Input mask=\"+7(999)999-99-99\" id=\"phone\" type=\"text\" onChange={(e)=>{handlePhoneChange(e)}}></Input>\r\n                        <span></span>\r\n                    </InputBlock>\r\n                    <InputBlock>\r\n                        <label  htmlFor=\"payment\">Сумма платежа</label>\r\n                        <Input mask=\"9999\" id=\"payment\" type=\"text\"></Input>\r\n                        <span></span>    \r\n                    </InputBlock>\r\n                    <button onClick={(e)=> {sendData(e)}}>go</button>\r\n                </form>\r\n            </PaymentContainer>\r\n        )\r\n    } else {\r\n    return <h1>{data.errMessage}</h1>\r\n    }\r\n}\r\n\r\nPaymentPage.getInitialProps = async (ctx) => {\r\n    const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\r\n    const data = await res.json();\r\n    return { data }\r\n}\r\n\r\nexport default PaymentPage"]},"metadata":{},"sourceType":"module"}