{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\GitHub\\\\brave_test_task\\\\src\\\\pages\\\\pay\\\\[payOperatorID].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { useRouter } from \"next/router\";\nimport { PaymentContainer, InputBlock, ErrorMessage, Input } from '../../components/PaymentPageStyled';\nimport InputForm from \"../../components/inputFormComponent/InputForm\";\n\nvar PaymentPage = function PaymentPage(_ref) {\n  _s();\n\n  var operatorData = _ref.operatorData;\n  var router = useRouter();\n\n  var _useState = useState(''),\n      phone = _useState[0],\n      setPhone = _useState[1];\n\n  var _useState2 = useState(false),\n      validPhone = _useState2[0],\n      setIsValidPhone = _useState2[1];\n\n  var _useState3 = useState(''),\n      payment = _useState3[0],\n      setPayment = _useState3[1];\n\n  var _useState4 = useState(false),\n      validPayment = _useState4[0],\n      setIsValidPayment = _useState4[1];\n\n  var _useState5 = useState(false),\n      validForm = _useState5[0],\n      setIsValidForm = _useState5[1];\n\n  var _useState6 = useState({\n    phone: '',\n    payment: ''\n  }),\n      errors = _useState6[0],\n      setErrors = _useState6[1];\n\n  var _useState7 = useState({\n    result: false,\n    message: ''\n  }),\n      responseData = _useState7[0],\n      setResponseData = _useState7[1];\n\n  useEffect(function () {\n    if (validPhone && validPayment) {\n      setIsValidForm(true);\n    } else {\n      setIsValidForm(false);\n    }\n  }); //сделать useEffect и обновлять кнопку формы\n\n  function sendData(_x) {\n    return _sendData.apply(this, arguments);\n  }\n\n  function _sendData() {\n    _sendData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var phoneArr, validPhone, test, reqBody, req, res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              phoneArr = phone.match(/\\d/g);\n              validPhone = phoneArr === null || phoneArr === void 0 ? void 0 : phoneArr.join('');\n              test = router.query.payOperatorID;\n              console.log(test);\n              reqBody = {\n                phoneNumber: validPhone,\n                payment: payment,\n                operatorName: operatorData === null || operatorData === void 0 ? void 0 : operatorData.data.operatorName\n              };\n              setResponseData({\n                result: false,\n                message: 'Обработка платежа...'\n              });\n              _context.next = 9;\n              return fetch(\"http://localhost:3000/api/pay\", {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(reqBody)\n              });\n\n            case 9:\n              req = _context.sent;\n              _context.next = 12;\n              return req.json();\n\n            case 12:\n              res = _context.sent;\n              setResponseData(res);\n              setTimeout(function () {\n                redirect(res.result);\n              }, 1000);\n              return _context.abrupt(\"return\", res);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _sendData.apply(this, arguments);\n  }\n\n  function redirect(result) {\n    if (result) {\n      router.replace('/');\n    } else {\n      setPhone('');\n      setIsValidPhone(false);\n      setPayment('');\n      setIsValidPayment(false);\n      setIsValidForm(false);\n    }\n  }\n\n  if (operatorData && operatorData.data.id) {\n    return __jsx(PaymentContainer, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, __jsx(InputForm, {\n      id: \"phone\",\n      name: \"phone\",\n      type: \"tel\",\n      placeholder: \"+7(999)-999-99-99\",\n      callbackValueState: setPhone,\n      callbackValidState: setIsValidPhone,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    }), __jsx(InputForm, {\n      id: \"payment\",\n      name: \"payment\",\n      type: \"text\",\n      placeholder: \"Введите сумму\",\n      callbackValueState: setPayment,\n      callbackValidState: setIsValidPayment,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }), __jsx(\"form\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }\n    }, __jsx(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }\n    }, \"\\u041E\\u043F\\u043B\\u0430\\u0442\\u0430 \", operatorData.data.operatorName), __jsx(InputBlock, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"phone\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }\n    }, \"\\u041D\\u043E\\u043C\\u0435\\u0440 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\\u0430\"), __jsx(Input, {\n      valid: validPhone,\n      id: \"phone\",\n      name: \"phone\",\n      value: phone,\n      type: \"tel\",\n      placeholder: \"+7(999)-999-99-99\",\n      onChange: function onChange(e) {\n        return handleUserInput(e);\n      },\n      onClick: function onClick() {\n        return passFirstValue();\n      },\n      onFocus: function onFocus() {\n        return passFirstValue();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 25\n      }\n    }), __jsx(ErrorMessage, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }\n    }, errors.phone)), __jsx(InputBlock, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"payment\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 25\n      }\n    }, \"\\u0421\\u0443\\u043C\\u043C\\u0430 \\u043F\\u043B\\u0430\\u0442\\u0435\\u0436\\u0430\"), __jsx(Input, {\n      valid: validPayment,\n      id: \"payment\",\n      name: \"payment\",\n      value: payment,\n      type: \"text\",\n      placeholder: \"\\u0421\\u0443\\u043C\\u043C\\u0430 \\u043E\\u0442 1 \\u0434\\u043E 1000\\u0440\",\n      onChange: function onChange(e) {\n        return handleUserInput(e);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 25\n      }\n    }), __jsx(ErrorMessage, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 25\n      }\n    }, errors.payment)), __jsx(\"input\", {\n      disabled: !validForm,\n      type: \"submit\",\n      value: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\",\n      onClick: function onClick(e) {\n        sendData(e);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }\n    })), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }\n    }, responseData.message));\n  } else {\n    return __jsx(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 16\n      }\n    }, operatorData === null || operatorData === void 0 ? void 0 : operatorData.errMessage);\n  }\n};\n\n_s(PaymentPage, \"HHEzIzC3KqQ6tlxjMLt/a5sbBtk=\", false, function () {\n  return [useRouter];\n});\n\n_c = PaymentPage;\n\nPaymentPage.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ctx) {\n    var res, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch(\"http://localhost:3000/api/operators/\".concat(ctx.query.payOperatorID));\n\n          case 2:\n            res = _context2.sent;\n            _context2.next = 5;\n            return res.json();\n\n          case 5:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              operatorData: data\n            });\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default PaymentPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentPage\");","map":{"version":3,"sources":["C:/GitHub/brave_test_task/src/pages/pay/[payOperatorID].tsx"],"names":["React","useEffect","useState","useRouter","PaymentContainer","InputBlock","ErrorMessage","Input","InputForm","PaymentPage","operatorData","router","phone","setPhone","validPhone","setIsValidPhone","payment","setPayment","validPayment","setIsValidPayment","validForm","setIsValidForm","errors","setErrors","result","message","responseData","setResponseData","sendData","e","preventDefault","phoneArr","match","join","test","query","payOperatorID","console","log","reqBody","phoneNumber","operatorName","data","fetch","method","headers","body","JSON","stringify","req","json","res","setTimeout","redirect","replace","id","handleUserInput","passFirstValue","errMessage","getInitialProps","ctx"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {useRouter} from \"next/router\";\r\nimport {NextPageContext} from 'next';\r\nimport {\r\n    PaymentContainer,\r\n    InputBlock,\r\n    ErrorMessage,\r\n    Input,\r\n} from '../../components/PaymentPageStyled';\r\nimport InputForm from \"../../components/inputFormComponent/InputForm\";\r\n\r\ninterface PaymentProps {\r\n    operatorData: OperatorData | undefined\r\n}\r\n\r\ninterface SendingData {\r\n    phoneNumber: string | undefined,\r\n    payment: string,\r\n    operatorName: string | undefined\r\n}\r\n\r\nconst PaymentPage = ({operatorData}: PaymentProps) => {\r\n    const router = useRouter();\r\n\r\n    const [phone, setPhone] = useState('');\r\n    const [validPhone, setIsValidPhone] = useState(false);\r\n    const [payment, setPayment] = useState('');\r\n    const [validPayment, setIsValidPayment] = useState(false);\r\n    const [validForm, setIsValidForm] = useState(false);\r\n    const [errors, setErrors] = useState({\r\n        phone: '',\r\n        payment: '',\r\n    })\r\n    const [responseData, setResponseData] = useState({\r\n        result: false,\r\n        message:''\r\n    })\r\n\r\n\r\n    useEffect(()=> {\r\n        if(validPhone && validPayment) {\r\n            setIsValidForm(true);\r\n        } else {\r\n            setIsValidForm(false);\r\n        }\r\n    })\r\n\r\n    //сделать useEffect и обновлять кнопку формы\r\n\r\n    async function sendData(e: React.FormEvent){\r\n        e.preventDefault();\r\n        const phoneArr : RegExpMatchArray | null = phone.match(/\\d/g);\r\n        const validPhone = phoneArr?.join('');\r\n        let test = router.query.payOperatorID;\r\n        console.log(test)\r\n        const reqBody : SendingData = {\r\n            phoneNumber: validPhone,\r\n            payment: payment,\r\n            operatorName: operatorData?.data.operatorName\r\n        }\r\n        setResponseData({\r\n            result: false,\r\n            message: 'Обработка платежа...'\r\n        })\r\n        const req = await fetch(\r\n            `http://localhost:3000/api/pay`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(reqBody)\r\n            });\r\n        const res = await req.json();\r\n        setResponseData(res);\r\n        setTimeout(() => {\r\n            redirect(res.result)\r\n        }, 1000);\r\n        return res\r\n    }\r\n\r\n    function redirect(result : object) {\r\n        if(result) {\r\n            router.replace('/');\r\n        } else {\r\n            setPhone('');\r\n            setIsValidPhone(false);\r\n            setPayment('');\r\n            setIsValidPayment(false);\r\n            setIsValidForm(false);\r\n        }\r\n    }\r\n    \r\n    if (operatorData && operatorData.data.id) {\r\n        return (\r\n            <PaymentContainer>\r\n                <InputForm\r\n                    id={\"phone\"}\r\n                    name={\"phone\"}\r\n                    type={\"tel\"}\r\n                    placeholder={\"+7(999)-999-99-99\"}\r\n                    callbackValueState={setPhone}\r\n                    callbackValidState={setIsValidPhone}\r\n                    />\r\n\r\n                <InputForm\r\n                    id={\"payment\"}\r\n                    name={\"payment\"}\r\n                    type={\"text\"}\r\n                    placeholder={\"Введите сумму\"}\r\n                    callbackValueState={setPayment}\r\n                    callbackValidState={setIsValidPayment}\r\n                />\r\n\r\n\r\n\r\n                <form>\r\n                    <h1>Оплата {operatorData.data.operatorName}</h1>\r\n                    <InputBlock>\r\n                        <label htmlFor=\"phone\">Номер телефона</label>\r\n                        <Input\r\n                            valid={validPhone}\r\n                            id=\"phone\"\r\n                            name=\"phone\"\r\n                            value={phone} \r\n                            type=\"tel\"\r\n                            placeholder=\"+7(999)-999-99-99\"\r\n                            onChange={(e: React.ChangeEvent<HTMLInputElement>)=> handleUserInput(e)}\r\n                            onClick={()=> passFirstValue()}\r\n                            onFocus={()=> passFirstValue()}\r\n                        />\r\n                        <ErrorMessage>{errors.phone}</ErrorMessage>\r\n                    </InputBlock>\r\n                    <InputBlock>\r\n                        <label htmlFor=\"payment\">Сумма платежа</label>\r\n                        <Input\r\n                            valid={validPayment}\r\n                            id=\"payment\"\r\n                            name=\"payment\"\r\n                            value={payment} \r\n                            type=\"text\"\r\n                            placeholder=\"Сумма от 1 до 1000р\"\r\n                            onChange={(e : React.ChangeEvent<HTMLInputElement>)=> handleUserInput(e)}\r\n                        />\r\n                        <ErrorMessage>{errors.payment}</ErrorMessage>\r\n                    </InputBlock>\r\n                    \r\n                    <input disabled={!validForm} type=\"submit\" value=\"Отправить\" onClick={(e)=> {sendData(e)}}/>\r\n                </form>\r\n                <div>{responseData.message}</div>\r\n            </PaymentContainer>\r\n        )\r\n    } else {\r\n        return <h1>{operatorData?.errMessage}</h1>\r\n    }\r\n}\r\n\r\nexport interface OperatorData {\r\n    data: {\r\n        id: string,\r\n        operatorName: string,\r\n        operatorLink: string,\r\n        imgUrl?: string\r\n    },\r\n    errMessage: string,\r\n    ok: boolean\r\n}\r\n\r\nPaymentPage.getInitialProps = async (ctx: NextPageContext) => {\r\n    const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\r\n    const data : OperatorData | undefined = await res.json();\r\n    return { operatorData: data }\r\n}\r\n\r\nexport default PaymentPage"]},"metadata":{},"sourceType":"module"}