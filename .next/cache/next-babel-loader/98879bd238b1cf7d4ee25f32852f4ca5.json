{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\GitHub\\\\brave_test_task\\\\src\\\\components\\\\inputFormComponent\\\\InputForm.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { InputBlock, Input, ErrorMessage, Label } from \"./InputFormStyled\";\n\nvar InputForm = function InputForm(props) {\n  _s();\n\n  var _useState = useState({\n    error: 'Поле должно быть заполнено'\n  }),\n      inputError = _useState[0],\n      setInputError = _useState[1];\n\n  var phoneRegexp = /\\+7\\s?[\\(]{0,1}9[0-9]{2}[\\)][-]{0,1}\\s?\\d{3}[-]{0,1}\\d{2}[-]{0,1}\\d{2}/;\n  var paymentRegexp = /^\\d+$/;\n  var letterRegexp = /[а-яА-ЯёЁa-zA-Z]+$/;\n\n  function handleUserInput(e) {\n    var inputName = e.target.name;\n    var value = e.target.value;\n    props.callbackValueState(value);\n    validate(inputName, value);\n  }\n\n  function validate(inputName, value) {\n    var validationError = inputError;\n    var isValidValue = props.inputValid;\n\n    switch (inputName) {\n      case 'phone':\n        if (value.length < props.inputValue.length) {\n          props.callbackValueState(value);\n          props.callbackValidState(false);\n          validationError.error = 'Поле должно быть заполнено';\n        } else {\n          var val = _toConsumableArray(value);\n\n          if (value.length === 7) {\n            val.splice(6, 0, ')', '-');\n            props.callbackValueState(val.join(''));\n            console.log(val.join(''), value);\n          }\n\n          if (value.length === 12) {\n            val.splice(11, 0, '-');\n            props.callbackValueState(val.join(''));\n            console.log(val);\n          }\n\n          if (value.length === 15) {\n            val.splice(14, 0, '-');\n            props.callbackValueState(val.join(''));\n          }\n\n          if (value.length >= 17) {\n            var blockedValue = value.slice(0, 17);\n            props.callbackValueState(blockedValue);\n          }\n        }\n\n        if (phoneRegexp.test(value)) {\n          isValidValue = true;\n          validationError.error = '';\n        } else if (value.match(letterRegexp)) {\n          isValidValue = false;\n          validationError.error = 'Поле содержит недопустимые символы';\n        } else {\n          isValidValue = false;\n          validationError.error = 'Поле должно быть заполено';\n        }\n\n        break;\n\n      case 'payment':\n        if (value === '') {\n          props.callbackValueState(value);\n          isValidValue = false;\n          validationError.error = 'Введите сумму в заданных границах (от 1р до 1000р)';\n        } else if (paymentRegexp.test(value)) {\n          var _val = parseInt(value);\n\n          if (_val >= 1 && _val <= 1000) {\n            isValidValue = true;\n            validationError.error = '';\n          } else {\n            isValidValue = false;\n            validationError.error = 'Введите сумму в заданных границах (от 1р до 1000р)';\n          }\n        } else {\n          isValidValue = false;\n          validationError.error = 'Поле содержит недопустимые символы';\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    setInputError(validationError);\n    props.callbackValidState(isValidValue);\n  }\n\n  function passFirstValue() {\n    var _props$inputValue;\n\n    if (((_props$inputValue = props.inputValue) === null || _props$inputValue === void 0 ? void 0 : _props$inputValue.length) === 0 && props.name === 'phone') {\n      props.callbackValueState('+7(');\n    }\n  }\n\n  return __jsx(InputBlock, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, __jsx(Label, {\n    htmlFor: props.name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, props.labelContent, \":\"), __jsx(Input, {\n    valid: props.inputValid,\n    id: props.id,\n    name: props.name,\n    type: props.type,\n    value: props.inputValue,\n    placeholder: props.placeholder,\n    onChange: function onChange(e) {\n      handleUserInput(e);\n    },\n    onClick: function onClick() {\n      passFirstValue();\n    },\n    onFocus: function onFocus() {\n      passFirstValue();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }), __jsx(ErrorMessage, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, inputError.error));\n};\n\n_s(InputForm, \"8SNjxWCrm9DCmmaNz3su4DCFw3A=\");\n\n_c = InputForm;\nexport default InputForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputForm\");","map":{"version":3,"sources":["C:/GitHub/brave_test_task/src/components/inputFormComponent/InputForm.tsx"],"names":["React","useState","InputBlock","Input","ErrorMessage","Label","InputForm","props","error","inputError","setInputError","phoneRegexp","paymentRegexp","letterRegexp","handleUserInput","e","inputName","target","name","value","callbackValueState","validate","validationError","isValidValue","inputValid","length","inputValue","callbackValidState","val","splice","join","console","log","blockedValue","slice","test","match","parseInt","passFirstValue","labelContent","id","type","placeholder"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {InputBlock, Input, ErrorMessage, Label} from \"./InputFormStyled\";\r\n\r\ninterface InputFormProps {\r\n    id: string,\r\n    name: string,\r\n    type: string,\r\n    placeholder: string,\r\n    labelContent: string,\r\n    callbackValueState(value:string): void,\r\n    callbackValidState(isValid: boolean): void,\r\n    inputValue: string,\r\n    inputValid: boolean,\r\n}\r\n\r\nconst InputForm = (props:InputFormProps) => {\r\n    const [inputError, setInputError] = useState({\r\n        error: 'Поле должно быть заполнено',\r\n    });\r\n\r\n    const phoneRegexp = /\\+7\\s?[\\(]{0,1}9[0-9]{2}[\\)][-]{0,1}\\s?\\d{3}[-]{0,1}\\d{2}[-]{0,1}\\d{2}/;\r\n    const paymentRegexp = /^\\d+$/;\r\n    const letterRegexp = /[а-яА-ЯёЁa-zA-Z]+$/;\r\n\r\n    function handleUserInput(e : React.ChangeEvent<HTMLInputElement>) {\r\n        const inputName = e.target.name;\r\n        const value = e.target.value;\r\n        props.callbackValueState(value);\r\n        validate(inputName, value);\r\n    }\r\n\r\n    function validate(inputName: string, value : string) : void{\r\n        const validationError = inputError;\r\n        let isValidValue = props.inputValid;\r\n        switch (inputName) {\r\n            case 'phone':\r\n                if(value.length < props.inputValue.length ) {\r\n                    props.callbackValueState(value);\r\n                    props.callbackValidState(false);\r\n                    validationError.error = 'Поле должно быть заполнено';\r\n                }else {\r\n                    let val = [...value];\r\n                    if(value.length === 7) {\r\n                        val.splice(6, 0, ')', '-');\r\n                        props.callbackValueState(val.join(''));\r\n                        console.log(val.join(''), value)\r\n                    }\r\n                    if(value.length === 12) {\r\n                        val.splice(11, 0, '-');\r\n                        props.callbackValueState(val.join(''));\r\n                        console.log(val)\r\n                    }\r\n                    if(value.length === 15) {\r\n                        val.splice(14, 0, '-');\r\n                        props.callbackValueState(val.join(''));\r\n                    }\r\n                    if(value.length >= 17) {\r\n                        const blockedValue = value.slice(0, 17);\r\n                        props.callbackValueState(blockedValue);\r\n                    }\r\n                }\r\n                if(phoneRegexp.test(value)) {\r\n                    isValidValue = true;\r\n                    validationError.error = ''\r\n                } else if(value.match(letterRegexp)){\r\n                    isValidValue = false;\r\n                    validationError.error = 'Поле содержит недопустимые символы';\r\n                } else{\r\n                    isValidValue= false;\r\n                    validationError.error = 'Поле должно быть заполено';\r\n                }\r\n                break;\r\n            case 'payment':\r\n                if(value === '') {\r\n                    props.callbackValueState(value);\r\n                    isValidValue = false;\r\n                    validationError.error = 'Введите сумму в заданных границах (от 1р до 1000р)';\r\n                } else if (paymentRegexp.test(value)) {\r\n                    const val = parseInt(value);\r\n                    if (val >= 1 && val <= 1000) {\r\n                        isValidValue = true;\r\n                        validationError.error = '';\r\n                    } else {\r\n                        isValidValue = false;\r\n                        validationError.error = 'Введите сумму в заданных границах (от 1р до 1000р)';\r\n                    }\r\n                } else {\r\n                    isValidValue = false;\r\n                    validationError.error = 'Поле содержит недопустимые символы';\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        setInputError(validationError);\r\n        props.callbackValidState(isValidValue);\r\n    }\r\n\r\n    function passFirstValue() : void {\r\n        if(props.inputValue?.length === 0 && props.name === 'phone') {\r\n            props.callbackValueState('+7(');\r\n        }\r\n    }\r\n\r\n    return(\r\n        <InputBlock>\r\n            <Label htmlFor={props.name}>{props.labelContent}:</Label>\r\n            <Input\r\n                valid={props.inputValid}\r\n                id={props.id}\r\n                name={props.name}\r\n                type={props.type}\r\n                value={props.inputValue}\r\n                placeholder={props.placeholder}\r\n                onChange={(e:React.ChangeEvent<HTMLInputElement>) => {handleUserInput(e)}}\r\n                onClick={()=> {passFirstValue()}}\r\n                onFocus={()=> {passFirstValue()}}\r\n            />\r\n            <ErrorMessage>{inputError.error}</ErrorMessage>\r\n        </InputBlock>\r\n    )\r\n}\r\n\r\nexport default InputForm"]},"metadata":{},"sourceType":"module"}