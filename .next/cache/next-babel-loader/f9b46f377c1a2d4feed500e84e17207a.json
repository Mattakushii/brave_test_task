{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { TileContainer, Button } from \"./OperatorsListStyled\";\nimport OperatorTile from \"../operatorTileComponent/OperatorTile\";\n\nvar OperatorsList = function OperatorsList(_ref) {\n  _s();\n\n  var props = _extends({}, _ref);\n\n  var newOperator = {\n    \"id\": \"4\",\n    \"operatorName\": \"Yota\",\n    \"operatorLink\": \"yota\",\n    \"slogan\": \"ya yo ta\"\n  };\n\n  var _useState = useState(false),\n      isVisible = _useState[0],\n      setIsVisible = _useState[1];\n\n  var _useState2 = useState(props.dataList),\n      operatorsList = _useState2[0],\n      setOperatorsList = _useState2[1];\n\n  function handleChange() {\n    return _handleChange.apply(this, arguments);\n  }\n\n  function _handleChange() {\n    _handleChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('http://localhost:3000/api/operators/addOperator', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json;charset=utf-8'\n                },\n                body: JSON.stringify(newOperator)\n              });\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              result = _context.sent;\n              setOperatorsList(function (operatorsList) {\n                return [].concat(_toConsumableArray(operatorsList), [result]);\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _handleChange.apply(this, arguments);\n  }\n\n  if (!isVisible) {}\n};\n\n_s(OperatorsList, \"cJdojGtaWcVmqdk1i0oxl7cv+Vw=\");\n\n_c = OperatorsList;\nexport default OperatorsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"OperatorsList\");","map":{"version":3,"sources":["C:/GitHub/brave_test_task/src/components/operatorsListComponent/OperatorsList.js"],"names":["React","useState","TileContainer","Button","OperatorTile","OperatorsList","props","newOperator","isVisible","setIsVisible","dataList","operatorsList","setOperatorsList","handleChange","fetch","method","headers","body","JSON","stringify","response","json","result"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,aAAT,EAAwBC,MAAxB,QAAsC,uBAAtC;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAAgB;AAAA;;AAAA,MAAXC,KAAW;;AAClC,MAAMC,WAAW,GAAG;AAChB,UAAM,GADU;AAEhB,oBAAgB,MAFA;AAGhB,oBAAgB,MAHA;AAIhB,cAAU;AAJM,GAApB;;AADkC,kBAQAN,QAAQ,CAAC,KAAD,CARR;AAAA,MAQ3BO,SAR2B;AAAA,MAQhBC,YARgB;;AAAA,mBASQR,QAAQ,CAACK,KAAK,CAACI,QAAP,CAThB;AAAA,MAS3BC,aAT2B;AAAA,MASZC,gBATY;;AAAA,WAWnBC,YAXmB;AAAA;AAAA;;AAAA;AAAA,6EAWlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC2BC,KAAK,CAC5B,iDAD4B,EACuB;AAC/CC,gBAAAA,MAAM,EAAE,MADuC;AAE/CC,gBAAAA,OAAO,EAAE;AACL,kCAAgB;AADX,iBAFsC;AAK7CC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeZ,WAAf;AALuC,eADvB,CADhC;;AAAA;AACUa,cAAAA,QADV;AAAA;AAAA,qBASyBA,QAAQ,CAACC,IAAT,EATzB;;AAAA;AASUC,cAAAA,MATV;AAUIV,cAAAA,gBAAgB,CAChB,UAAAD,aAAa,EAAI;AACb,oDAAWA,aAAX,IAA0BW,MAA1B;AACH,eAHe,CAAhB;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAXkC;AAAA;AAAA;;AA2BlC,MAAG,CAACd,SAAJ,EAAe,CAEd;AAGJ,CAhCD;;GAAMH,a;;KAAAA,a;AAmCN,eAAeA,aAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport { TileContainer, Button } from \"./OperatorsListStyled\";\r\nimport OperatorTile from \"../operatorTileComponent/OperatorTile\";\r\n\r\nconst OperatorsList = ({...props}) => {\r\n    const newOperator = {\r\n        \"id\": \"4\",\r\n        \"operatorName\": \"Yota\",\r\n        \"operatorLink\": \"yota\",\r\n        \"slogan\": \"ya yo ta\"\r\n    }\r\n\r\n    const [isVisible, setIsVisible] = useState(false);\r\n    const [operatorsList, setOperatorsList] = useState(props.dataList);\r\n\r\n    async function handleChange() {\r\n        const response = await fetch(\r\n        'http://localhost:3000/api/operators/addOperator', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n              },\r\n              body: JSON.stringify(newOperator)\r\n        })\r\n        const result = await response.json();\r\n        setOperatorsList(\r\n        operatorsList => {\r\n            return [...operatorsList, result]\r\n        });\r\n    }\r\n\r\n    if(!isVisible) {\r\n\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\nexport default OperatorsList"]},"metadata":{},"sourceType":"module"}