{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\brave_test_task\\\\src\\\\pages\\\\pay\\\\[payOperatorID].tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useContext } from 'react';\nimport { useRouter } from \"next/router\";\nimport { Context } from \"../../Context\";\nimport { FormHeader, PaymentContainer, PaymentForm, OperationResult, SubmitButton } from '../../components/PaymentPageStyled';\nimport InputForm from \"../../components/inputFormComponent/InputForm\";\n\nconst PaymentPage = ({\n  operatorData\n}) => {\n  const router = useRouter();\n  const switchBackground = useContext(Context);\n  const {\n    0: phone,\n    1: setPhone\n  } = useState('');\n  const {\n    0: validPhone,\n    1: setIsValidPhone\n  } = useState(false);\n  const {\n    0: payment,\n    1: setPayment\n  } = useState('');\n  const {\n    0: validPayment,\n    1: setIsValidPayment\n  } = useState(false);\n  const {\n    0: validForm,\n    1: setIsValidForm\n  } = useState(false);\n  const {\n    0: responseData,\n    1: setResponseData\n  } = useState({\n    result: false,\n    message: ''\n  });\n  const {\n    0: popupFlag,\n    1: setPopupFlag\n  } = useState(false);\n  useEffect(() => {\n    if (validPhone && validPayment) {\n      setIsValidForm(true);\n    } else {\n      setIsValidForm(false);\n    }\n  });\n\n  async function sendData(e) {\n    e.preventDefault();\n    const phoneArr = phone.match(/\\d/g);\n    const validPhone = phoneArr === null || phoneArr === void 0 ? void 0 : phoneArr.join('');\n    const reqBody = {\n      phoneNumber: validPhone,\n      payment: payment,\n      operatorName: operatorData === null || operatorData === void 0 ? void 0 : operatorData.data.operatorName\n    };\n    console.log(reqBody);\n    setResponseData({\n      result: false,\n      message: 'Обработка платежа...'\n    });\n    const req = await fetch(`http://localhost:3000/api/pay`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(reqBody)\n    });\n    const res = await req.json();\n    setResponseData(res);\n    setTimeout(() => {\n      redirect(res.result);\n    }, 1000);\n    return res;\n  }\n\n  function redirect(result) {\n    if (result) {\n      router.replace('/');\n    } else {\n      setPhone('');\n      setIsValidPhone(false);\n      setPayment('');\n      setIsValidPayment(false);\n      setIsValidForm(false);\n    }\n  }\n\n  if (operatorData && operatorData.data.id) {\n    return __jsx(PaymentContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, __jsx(PaymentForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, __jsx(FormHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }, \"\\u041E\\u043F\\u043B\\u0430\\u0442\\u0430 \", operatorData.data.operatorName), __jsx(InputForm, {\n      id: \"phone\",\n      name: \"phone\",\n      type: \"tel\",\n      placeholder: \"+7(999)-999-99-99\",\n      labelContent: \"Номер телефона\",\n      callbackValueState: setPhone,\n      callbackValidState: setIsValidPhone,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }\n    }), __jsx(InputForm, {\n      id: \"payment\",\n      name: \"payment\",\n      type: \"text\",\n      placeholder: \"Введите сумму\",\n      labelContent: \"Сумма платежа\",\n      callbackValueState: setPayment,\n      callbackValidState: setIsValidPayment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }\n    }), __jsx(SubmitButton, {\n      disabled: !validForm,\n      onClick: e => {\n        sendData(e);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }, \"\\u041E\\u043F\\u043B\\u0430\\u0442\\u0438\\u0442\\u044C\")), __jsx(PopupCintainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }, __jsx(OperationResult, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }\n    }, responseData.message)));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 16\n      }\n    }, operatorData === null || operatorData === void 0 ? void 0 : operatorData.errMessage);\n  }\n};\n\nPaymentPage.getInitialProps = async ctx => {\n  const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\n  const data = await res.json();\n  return {\n    operatorData: data\n  };\n};\n\nexport default PaymentPage;","map":{"version":3,"sources":["C:/GitHub/brave_test_task/src/pages/pay/[payOperatorID].tsx"],"names":["React","useEffect","useState","useContext","useRouter","Context","FormHeader","PaymentContainer","PaymentForm","OperationResult","SubmitButton","InputForm","PaymentPage","operatorData","router","switchBackground","phone","setPhone","validPhone","setIsValidPhone","payment","setPayment","validPayment","setIsValidPayment","validForm","setIsValidForm","responseData","setResponseData","result","message","popupFlag","setPopupFlag","sendData","e","preventDefault","phoneArr","match","join","reqBody","phoneNumber","operatorName","data","console","log","req","fetch","method","headers","body","JSON","stringify","res","json","setTimeout","redirect","replace","id","errMessage","getInitialProps","ctx","query","payOperatorID"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useContext} from 'react';\r\nimport {useRouter} from \"next/router\";\r\nimport {NextPageContext} from 'next';\r\nimport {Context} from \"../../Context\";\r\nimport {\r\n    FormHeader,\r\n    PaymentContainer,\r\n    PaymentForm,\r\n    OperationResult, SubmitButton\r\n} from '../../components/PaymentPageStyled';\r\nimport InputForm from \"../../components/inputFormComponent/InputForm\";\r\n\r\ninterface PaymentProps {\r\n    operatorData: OperatorData | undefined\r\n}\r\n\r\ninterface SendingData {\r\n    phoneNumber: string | undefined,\r\n    payment: string,\r\n    operatorName: string | undefined\r\n}\r\n\r\nconst PaymentPage = ({operatorData}: PaymentProps) => {\r\n    const router = useRouter();\r\n    const switchBackground = useContext(Context)\r\n\r\n    const [phone, setPhone] = useState('');\r\n    const [validPhone, setIsValidPhone] = useState(false);\r\n    const [payment, setPayment] = useState('');\r\n    const [validPayment, setIsValidPayment] = useState(false);\r\n    const [validForm, setIsValidForm] = useState(false);\r\n    const [responseData, setResponseData] = useState({\r\n        result: false,\r\n        message:''\r\n    })\r\n    const [popupFlag, setPopupFlag] = useState(false);\r\n\r\n\r\n    useEffect(()=> {\r\n        if(validPhone && validPayment) {\r\n            setIsValidForm(true);\r\n        } else {\r\n            setIsValidForm(false);\r\n        }\r\n    })\r\n\r\n    async function sendData(e: React.FormEvent){\r\n        e.preventDefault();\r\n        const phoneArr : RegExpMatchArray | null = phone.match(/\\d/g);\r\n        const validPhone = phoneArr?.join('');\r\n        const reqBody : SendingData = {\r\n            phoneNumber: validPhone,\r\n            payment: payment,\r\n            operatorName: operatorData?.data.operatorName\r\n        }\r\n        console.log(reqBody)\r\n        setResponseData({\r\n            result: false,\r\n            message: 'Обработка платежа...'\r\n        })\r\n        const req = await fetch(\r\n            `http://localhost:3000/api/pay`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(reqBody)\r\n            });\r\n        const res = await req.json();\r\n        setResponseData(res);\r\n        setTimeout(() => {\r\n            redirect(res.result)\r\n        }, 1000);\r\n        return res\r\n    }\r\n\r\n    function redirect(result : object) {\r\n        if(result) {\r\n            router.replace('/');\r\n        } else {\r\n            setPhone('');\r\n            setIsValidPhone(false);\r\n            setPayment('');\r\n            setIsValidPayment(false);\r\n            setIsValidForm(false);\r\n        }\r\n    }\r\n    \r\n    if (operatorData && operatorData.data.id) {\r\n        return (\r\n            <PaymentContainer>\r\n                <PaymentForm>\r\n                    <FormHeader>Оплата {operatorData.data.operatorName}</FormHeader>\r\n                    <InputForm\r\n                        id={\"phone\"}\r\n                        name={\"phone\"}\r\n                        type={\"tel\"}\r\n                        placeholder={\"+7(999)-999-99-99\"}\r\n                        labelContent={\"Номер телефона\"}\r\n                        callbackValueState={setPhone}\r\n                        callbackValidState={setIsValidPhone}\r\n                    />\r\n                    <InputForm\r\n                        id={\"payment\"}\r\n                        name={\"payment\"}\r\n                        type={\"text\"}\r\n                        placeholder={\"Введите сумму\"}\r\n                        labelContent={\"Сумма платежа\"}\r\n                        callbackValueState={setPayment}\r\n                        callbackValidState={setIsValidPayment}\r\n                    />\r\n                    <SubmitButton disabled={!validForm} onClick={(e)=> {sendData(e)}}>Оплатить</SubmitButton>\r\n                </PaymentForm>\r\n                <PopupCintainer>\r\n                    <OperationResult>{responseData.message}</OperationResult>\r\n                </PopupCintainer>\r\n            </PaymentContainer>\r\n        )\r\n    } else {\r\n        return <h1>{operatorData?.errMessage}</h1>\r\n    }\r\n}\r\n\r\ninterface OperatorData {\r\n    data: {\r\n        id: string,\r\n        operatorName: string,\r\n        operatorLink: string,\r\n        imgUrl?: string\r\n    },\r\n    errMessage: string,\r\n    ok: boolean\r\n}\r\n\r\nPaymentPage.getInitialProps = async (ctx: NextPageContext) => {\r\n    const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\r\n    const data : OperatorData | undefined = await res.json();\r\n    return { operatorData: data }\r\n}\r\n\r\nexport default PaymentPage"]},"metadata":{},"sourceType":"module"}