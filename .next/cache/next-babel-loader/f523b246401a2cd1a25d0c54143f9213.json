{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\brave_test_task\\\\src\\\\pages\\\\pay\\\\[payOperatorID].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport { PaymentContainer } from '../../components/PaymentPageStyled';\nimport FormInput from '../../components/inputComponent/FormInput';\n\nconst PaymentPage = ({\n  data\n}) => {\n  //добавить логические состояния validphone validpayment чтобы включать выключать кнопку\n  const {\n    0: phone,\n    1: setPhone\n  } = useState('');\n  const {\n    0: payment,\n    1: setPayment\n  } = useState(''); //сделать логику для отключения кнопки\n\n  if (data && data.id) {\n    return __jsx(PaymentContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }\n    }, \"\\u041E\\u043F\\u043B\\u0430\\u0442\\u0430 \", data.operatorName), __jsx(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }\n    }, __jsx(FormInput, {\n      labelName: 'Номер телефона',\n      id: \"phone\",\n      type: \"tel\",\n      placeholder: \"+7(___)-___-__-__\",\n      mask: \"+7(999)-999-99-99\",\n      regExp: /\\+7\\s?[\\(]{0,1}9[0-9]{2}[\\)][-]{0,1}\\s?\\d{3}[-]{0,1}\\d{2}[-]{0,1}\\d{2}/g,\n      validationEvents: validationPhoneEvents,\n      validateMethod: validatePhone,\n      stateCallback: updatePhoneValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 21\n      }\n    }), __jsx(FormInput, {\n      labelName: \"Сумма оплаты\",\n      id: \"payment\",\n      type: \"text\",\n      placeholder: \"Введите сумму платежа\",\n      mask: \"9999\",\n      regExp: /\\d{4}/,\n      validationEvents: validationPaymentEvents,\n      validationMethod: validatePayment,\n      setStateCallbacl: updatePaymentValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }\n    }), __jsx(\"input\", {\n      type: \"submit\",\n      value: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\",\n      onClick: e => {\n        sendData(e);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }\n    })));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 12\n      }\n    }, data.errMessage);\n  }\n};\n\nPaymentPage.getInitialProps = async ctx => {\n  const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\n  const data = await res.json();\n  return {\n    data\n  };\n};\n\nexport default PaymentPage;\nconst validationPhoneEvents = {\n  valid: {\n    value: 'Верно!!!',\n    bool: true\n  },\n  invalid: {\n    value: 'Заполните поле до конца',\n    bool: false\n  }\n};\nconst validationPaymentEvents = {\n  valid: {\n    value: 'Верно!!!',\n    bool: true\n  },\n  invalid: {\n    value: 'Введите сумму от 1 до 1000 рублей',\n    bool: false\n  }\n};","map":{"version":3,"sources":["C:/GitHub/brave_test_task/src/pages/pay/[payOperatorID].js"],"names":["useState","PaymentContainer","FormInput","PaymentPage","data","phone","setPhone","payment","setPayment","id","operatorName","validationPhoneEvents","validatePhone","updatePhoneValue","validationPaymentEvents","validatePayment","updatePaymentValue","e","sendData","errMessage","getInitialProps","ctx","res","fetch","query","payOperatorID","json","valid","value","bool","invalid"],"mappings":"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","sourcesContent":["import {useState} from 'react'; \r\nimport {PaymentContainer} from '../../components/PaymentPageStyled';\r\nimport FormInput from '../../components/inputComponent/FormInput'\r\n\r\nconst PaymentPage = ({data}) => {\r\n\r\n    //добавить логические состояния validphone validpayment чтобы включать выключать кнопку\r\n    const [phone, setPhone] = useState('');\r\n    const [payment, setPayment] = useState('');\r\n    //сделать логику для отключения кнопки\r\n\r\n\r\n    if (data && data.id) {\r\n        return (\r\n            <PaymentContainer>  \r\n                <h1>Оплата {data.operatorName}</h1>    \r\n                <form>\r\n                    <FormInput\r\n                        labelName={'Номер телефона'}\r\n                        id={\"phone\"}\r\n                        type={\"tel\"}\r\n                        placeholder={\"+7(___)-___-__-__\"}\r\n                        mask={\"+7(999)-999-99-99\"}\r\n                        regExp={/\\+7\\s?[\\(]{0,1}9[0-9]{2}[\\)][-]{0,1}\\s?\\d{3}[-]{0,1}\\d{2}[-]{0,1}\\d{2}/g}\r\n                        validationEvents = {validationPhoneEvents}\r\n                        validateMethod = {validatePhone}\r\n                        stateCallback = {updatePhoneValue}\r\n                    />\r\n                    <FormInput\r\n                        labelName={\"Сумма оплаты\"}\r\n                        id={\"payment\"}\r\n                        type=\"text\"\r\n                        placeholder={\"Введите сумму платежа\"}\r\n                        mask={\"9999\"}\r\n                        regExp={/\\d{4}/}\r\n                        validationEvents = {validationPaymentEvents}\r\n                        validationMethod = {validatePayment}\r\n                        setStateCallbacl = {updatePaymentValue}\r\n                    />\r\n                    <input type=\"submit\" value=\"Отправить\" onClick={(e)=> {sendData(e)}}></input>\r\n                </form>\r\n            </PaymentContainer>\r\n        )\r\n    } else {\r\n    return <h1>{data.errMessage}</h1>\r\n    }\r\n}\r\n\r\nPaymentPage.getInitialProps = async (ctx) => {\r\n    const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\r\n    const data = await res.json();\r\n    return { data }\r\n}\r\n\r\nexport default PaymentPage\r\n\r\nconst validationPhoneEvents = {\r\n    valid: {\r\n        value: 'Верно!!!', \r\n        bool: true\r\n    },\r\n    invalid: {\r\n        value: 'Заполните поле до конца',\r\n        bool: false\r\n    }\r\n}\r\n\r\nconst validationPaymentEvents = {\r\n    valid: {\r\n        value: 'Верно!!!', \r\n        bool: true\r\n    },\r\n    invalid: {\r\n        value: 'Введите сумму от 1 до 1000 рублей',\r\n        bool: false\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}