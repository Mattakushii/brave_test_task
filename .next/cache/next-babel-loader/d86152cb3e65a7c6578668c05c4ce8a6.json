{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\brave_test_task\\\\src\\\\pages\\\\pay\\\\[payOperatorID].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport { useRouter } from \"next/router\";\nimport { PaymentContainer, InputBlock, ErrorMessage, Input } from '../../components/PaymentPageStyled';\n\nconst PaymentPage = ({\n  data\n}) => {\n  const router = useRouter();\n  const {\n    0: phone,\n    1: setPhone\n  } = useState('');\n  const {\n    0: validPhone,\n    1: setIsValidPhone\n  } = useState(false);\n  const {\n    0: payment,\n    1: setPayment\n  } = useState('');\n  const {\n    0: validPayment,\n    1: setIsValidPayment\n  } = useState(false);\n  const {\n    0: validForm,\n    1: setIsValidForm\n  } = useState(false);\n  const {\n    0: errors,\n    1: setErrors\n  } = useState({\n    phone: '',\n    payment: ''\n  });\n  const {\n    0: responseData,\n    1: setResponseData\n  } = useState({\n    result: '',\n    message: ''\n  }); //сделать логику для отключения кнопки\n\n  function handleUserInput(e) {\n    const inputName = e.target.name;\n    const value = e.target.value;\n\n    switch (inputName) {\n      case 'phone':\n        setPhone(value);\n        validateFields(inputName, value);\n        break;\n\n      case 'payment':\n        setPayment(value);\n        validateFields(inputName, value);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  function validateFields(fieldName, value) {\n    let validationErrors = errors;\n    let isValidPhone = validPhone;\n    let isValidPayment = validPayment;\n    const phoneRegexp = /\\+7\\s?[\\(]{0,1}9[0-9]{2}[\\)][-]{0,1}\\s?\\d{3}[-]{0,1}\\d{2}[-]{0,1}\\d{2}/;\n    const paymentRegexp = /^\\d+$/;\n    const letterRegexp = /[а-яА-ЯёЁa-zA-Z]+$/;\n\n    switch (fieldName) {\n      case 'phone':\n        if (value.length < phone.length) {\n          setPhone(value);\n          setIsValidPhone(false);\n          validationErrors.phone = 'Поле должно быть заполено';\n        } else {\n          if (value.length === 7) {\n            let [...val] = value;\n            val.splice(6, 0, ')', '-');\n            setPhone(val.join(''));\n          }\n\n          if (value.length === 12) {\n            let [...val] = value;\n            val.splice(11, 0, '-');\n            setPhone(val.join(''));\n          }\n\n          if (value.length === 15) {\n            let [...val] = value;\n            val.splice(14, 0, '-');\n            setPhone(val.join(''));\n          }\n\n          if (value.length >= 17) {\n            const blockedValue = value.slice(0, 17);\n            setPhone(blockedValue);\n          }\n        }\n\n        if (phoneRegexp.test(value)) {\n          isValidPhone = true;\n          validationErrors.phone = '';\n        } else if (value.match(letterRegexp)) {\n          isValidPhone = false;\n          validationErrors.phone = 'Поле должно содержать только цифры';\n        } else {\n          isValidPhone = false;\n          validationErrors.phone = 'Поле должно быть заполено';\n        }\n\n        break;\n\n      case 'payment':\n        if (value === '') {\n          isValidPayment = false;\n          validationErrors.payment = 'Введите сумму в заданных границах (от 1р до 1000р)';\n        } else if (paymentRegexp.test(value)) {\n          const val = value * 1;\n\n          if (val >= 1 && val <= 1000) {\n            isValidPayment = true;\n            validationErrors.payment = '';\n          } else {\n            isValidPayment = false;\n            validationErrors.payment = 'Введите сумму в заданных границах (от 1р до 1000р)';\n          }\n        } else {\n          isValidPayment = false;\n          validationErrors.payment = 'Поле содержит недопустимые символы';\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    setIsValidPhone(isValidPhone);\n    setIsValidPayment(isValidPayment);\n    setErrors(validationErrors);\n\n    if (isValidPhone && isValidPayment) {\n      setIsValidForm(true);\n    } else {\n      setIsValidForm(false);\n    }\n  }\n\n  function passFirstValue() {\n    if (phone.length === 0) {\n      setPhone('+7(');\n    }\n  }\n\n  async function sendData(e) {\n    e.preventDefault();\n    const data = {\n      phoneNumber: phone.match(/\\d/g).join(''),\n      payment: payment,\n      operatorName: router.query.payOperatorID\n    };\n    setResponseData({\n      result: false,\n      message: 'Обработка платежа...'\n    });\n    const req = await fetch(`http://localhost:3000/api/pay`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    const res = await req.json();\n    setResponseData(res);\n    setTimeout(() => {\n      redirect(res.result);\n    }, 1000);\n  }\n\n  function redirect(result) {\n    if (result) {\n      router.replace('/');\n    } else {\n      setPhone('');\n      setIsValidPhone(false);\n      setPayment('');\n      setIsValidPayment(false);\n      setIsValidForm(false);\n    }\n  }\n\n  if (data && data.id) {\n    return __jsx(PaymentContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    }, __jsx(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 21\n      }\n    }, \"\\u041E\\u043F\\u043B\\u0430\\u0442\\u0430 \", data.operatorName), __jsx(InputBlock, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"phone\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 25\n      }\n    }, \"\\u041D\\u043E\\u043C\\u0435\\u0440 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\\u0430\"), __jsx(Input, {\n      valid: validPhone,\n      id: \"phone\",\n      name: \"phone\",\n      value: phone,\n      type: \"tel\",\n      placeholder: \"+7(999)-999-99-99\",\n      onChange: e => handleUserInput(e),\n      onClick: () => passFirstValue(),\n      onFocus: () => passFirstValue(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 25\n      }\n    }), __jsx(ErrorMessage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 25\n      }\n    }, errors.phone)), __jsx(InputBlock, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"payment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 25\n      }\n    }, \"\\u0421\\u0443\\u043C\\u043C\\u0430 \\u043F\\u043B\\u0430\\u0442\\u0435\\u0436\\u0430\"), __jsx(Input, {\n      valid: validPayment,\n      id: \"payment\",\n      name: \"payment\",\n      value: payment,\n      type: \"text\",\n      placeholder: \"\\u0421\\u0443\\u043C\\u043C\\u0430 \\u043E\\u0442 1 \\u0434\\u043E 1000\\u0440\",\n      onChange: e => handleUserInput(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 25\n      }\n    }), __jsx(ErrorMessage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 25\n      }\n    }, errors.payment)), __jsx(\"input\", {\n      disabled: !validForm,\n      type: \"submit\",\n      value: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\",\n      onClick: e => {\n        sendData(e);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }\n    })), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }\n    }, responseData.message));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 16\n      }\n    }, data.errMessage);\n  }\n};\n\nPaymentPage.getInitialProps = async ctx => {\n  const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\n  const data = await res.json();\n  return {\n    data\n  };\n};\n\nexport default PaymentPage;","map":{"version":3,"sources":["C:/GitHub/brave_test_task/src/pages/pay/[payOperatorID].js"],"names":["useState","useRouter","PaymentContainer","InputBlock","ErrorMessage","Input","PaymentPage","data","router","phone","setPhone","validPhone","setIsValidPhone","payment","setPayment","validPayment","setIsValidPayment","validForm","setIsValidForm","errors","setErrors","responseData","setResponseData","result","message","handleUserInput","e","inputName","target","name","value","validateFields","fieldName","validationErrors","isValidPhone","isValidPayment","phoneRegexp","paymentRegexp","letterRegexp","length","val","splice","join","blockedValue","slice","test","match","passFirstValue","sendData","preventDefault","phoneNumber","operatorName","query","payOperatorID","req","fetch","method","headers","body","JSON","stringify","res","json","setTimeout","redirect","replace","id","errMessage","getInitialProps","ctx"],"mappings":"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","sourcesContent":["import {useState} from 'react';\r\nimport {useRouter} from \"next/router\";\r\nimport {\r\n    PaymentContainer,\r\n    InputBlock,\r\n    ErrorMessage,\r\n    Input,\r\n} from '../../components/PaymentPageStyled';\r\n\r\nconst PaymentPage = ({data}) => {\r\n    const router = useRouter();\r\n    \r\n    const [phone, setPhone] = useState('');\r\n    const [validPhone, setIsValidPhone] = useState(false);\r\n    const [payment, setPayment] = useState('');\r\n    const [validPayment, setIsValidPayment] = useState(false);\r\n    const [validForm, setIsValidForm] = useState(false);\r\n    const [errors, setErrors] = useState({\r\n        phone: '',\r\n        payment: '',\r\n    })\r\n    const [responseData, setResponseData] = useState({\r\n        result: '',\r\n        message:''\r\n    })\r\n    //сделать логику для отключения кнопки\r\n\r\n    function handleUserInput(e) {\r\n        const inputName = e.target.name;\r\n        const value = e.target.value;\r\n        switch(inputName) {\r\n            case 'phone':\r\n                setPhone(value);\r\n                validateFields(inputName, value);\r\n\r\n                break;\r\n            case 'payment':\r\n                setPayment(value);\r\n                validateFields(inputName, value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    function validateFields(fieldName, value) {\r\n        let validationErrors = errors;\r\n        let isValidPhone = validPhone;\r\n        let isValidPayment = validPayment;\r\n        const phoneRegexp = /\\+7\\s?[\\(]{0,1}9[0-9]{2}[\\)][-]{0,1}\\s?\\d{3}[-]{0,1}\\d{2}[-]{0,1}\\d{2}/;\r\n        const paymentRegexp = /^\\d+$/;\r\n        const letterRegexp = /[а-яА-ЯёЁa-zA-Z]+$/;\r\n\r\n        switch(fieldName) {\r\n            case 'phone':\r\n                if(value.length < phone.length) {\r\n                    setPhone(value);\r\n                    setIsValidPhone(false);\r\n                    validationErrors.phone = 'Поле должно быть заполено';\r\n                }else {\r\n                    if(value.length === 7) {\r\n                        let [...val] = value;\r\n                        val.splice(6, 0, ')', '-');\r\n                        setPhone(val.join(''))\r\n                    }\r\n                    if(value.length === 12) {\r\n                        let [...val] = value;\r\n                        val.splice(11, 0, '-');\r\n                        setPhone(val.join(''))\r\n                    }\r\n                    if(value.length === 15) {\r\n                        let [...val] = value;\r\n                        val.splice(14, 0, '-');\r\n                        setPhone(val.join(''))\r\n                    }\r\n                    if(value.length >= 17) {\r\n                        const blockedValue = value.slice(0, 17)\r\n                        setPhone(blockedValue)\r\n                    }\r\n                }\r\n                if(phoneRegexp.test(value)) {\r\n                    isValidPhone = true;\r\n                    validationErrors.phone = ''\r\n                } else if(value.match(letterRegexp)){\r\n                    isValidPhone = false;\r\n                    validationErrors.phone = 'Поле должно содержать только цифры'\r\n                } else{\r\n                    isValidPhone = false;\r\n                    validationErrors.phone = 'Поле должно быть заполено'\r\n                }\r\n                break;\r\n            case 'payment':\r\n                if(value === '') {\r\n                    isValidPayment = false;\r\n                    validationErrors.payment = 'Введите сумму в заданных границах (от 1р до 1000р)'\r\n                } else if (paymentRegexp.test(value)) {\r\n                    const val = value * 1;\r\n                    if (val >= 1 && val <= 1000) {\r\n                        isValidPayment = true;\r\n                        validationErrors.payment = ''\r\n                    } else {\r\n                        isValidPayment = false;\r\n                        validationErrors.payment = 'Введите сумму в заданных границах (от 1р до 1000р)'\r\n                    }\r\n                } else {\r\n                    isValidPayment = false;\r\n                    validationErrors.payment = 'Поле содержит недопустимые символы'\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        setIsValidPhone(isValidPhone);\r\n        setIsValidPayment(isValidPayment);\r\n        setErrors(validationErrors);\r\n        if(isValidPhone && isValidPayment) {\r\n            setIsValidForm(true);\r\n        } else {\r\n            setIsValidForm(false);\r\n        }\r\n    }\r\n\r\n    function passFirstValue() {\r\n        if(phone.length === 0) {\r\n            setPhone('+7(')\r\n        }\r\n    }\r\n\r\n    async function sendData(e) {\r\n        e.preventDefault();\r\n        const data = {\r\n            phoneNumber: phone.match(/\\d/g).join(''),\r\n            payment: payment,\r\n            operatorName: router.query.payOperatorID\r\n        }\r\n        setResponseData({\r\n            result: false,\r\n            message: 'Обработка платежа...'\r\n        })\r\n        const req = await fetch(\r\n            `http://localhost:3000/api/pay`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(data)\r\n            });\r\n        const res = await req.json();\r\n        setResponseData(res);\r\n        setTimeout(() => {\r\n            redirect(res.result)\r\n        }, 1000)\r\n    }\r\n\r\n    function redirect(result) {\r\n        if(result) {\r\n            router.replace('/');\r\n        } else {\r\n            setPhone('');\r\n            setIsValidPhone(false);\r\n            setPayment('');\r\n            setIsValidPayment(false);\r\n            setIsValidForm(false);\r\n        }\r\n    }\r\n    \r\n    if (data && data.id) {\r\n        return (\r\n            <PaymentContainer>\r\n                <form>\r\n                    <h1>Оплата {data.operatorName}</h1>\r\n                    <InputBlock>\r\n                        <label htmlFor=\"phone\">Номер телефона</label>\r\n                        <Input\r\n                            valid={validPhone}\r\n                            id=\"phone\"\r\n                            name=\"phone\"\r\n                            value={phone} \r\n                            type=\"tel\"\r\n                            placeholder=\"+7(999)-999-99-99\"\r\n                            onChange={(e)=> handleUserInput(e)}\r\n                            onClick={()=> passFirstValue()}\r\n                            onFocus={()=> passFirstValue()}\r\n                        ></Input>\r\n                        <ErrorMessage>{errors.phone}</ErrorMessage>\r\n                    </InputBlock>\r\n                    <InputBlock>\r\n                        <label htmlFor=\"payment\">Сумма платежа</label>\r\n                        <Input\r\n                            valid={validPayment}\r\n                            id=\"payment\"\r\n                            name=\"payment\"\r\n                            value={payment} \r\n                            type=\"text\"\r\n                            placeholder=\"Сумма от 1 до 1000р\"\r\n                            onChange={(e)=> handleUserInput(e)}\r\n                        ></Input>\r\n                        <ErrorMessage>{errors.payment}</ErrorMessage>\r\n                    </InputBlock>\r\n                    \r\n                    <input disabled={!validForm} type=\"submit\" value=\"Отправить\" onClick={(e)=> {sendData(e)}}></input>\r\n                </form>\r\n                <div>{responseData.message}</div>\r\n            </PaymentContainer>\r\n        )\r\n    } else {\r\n        return <h1>{data.errMessage}</h1>\r\n    }\r\n}\r\n\r\nPaymentPage.getInitialProps = async (ctx) => {\r\n    const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\r\n    const data = await res.json();\r\n    return { data }\r\n}\r\n\r\nexport default PaymentPage"]},"metadata":{},"sourceType":"module"}