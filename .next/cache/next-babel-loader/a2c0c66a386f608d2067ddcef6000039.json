{"ast":null,"code":"var _jsxFileName = \"C:\\\\GitHub\\\\brave_test_task\\\\src\\\\components\\\\inputComponent\\\\FormInput.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Input, InputBlock } from './FormInputStyled';\nimport { useState, useEffect } from 'react';\n\nconst FormInput = props => {\n  //для избежания предупреждения useLayoutEffect на стороне сервера\n  const {\n    0: showChild,\n    1: setShowChild\n  } = useState(false);\n  useEffect(() => {\n    setShowChild(true);\n  }, []);\n  const {\n    0: valid,\n    1: setValid\n  } = useState(false);\n  const {\n    0: value,\n    1: setValue\n  } = useState('');\n\n  function handleInputValue(e) {\n    if (value === e.target.value) {\n      return true;\n    } else if (props.regExp.test(e.target.value)) {\n      log;\n      const validVal = props.validateMethod(e.target.value);\n      props.stateCallback(validVal);\n      setValue(e.target.value);\n      setValid(true);\n    } else {\n      const invalidVal = props.validateMethod(e.target.value);\n      props.stateCallback(invalidVal);\n      setValue(e.target.value);\n      setValid(false);\n    }\n  }\n\n  if (!showChild) {\n    return null;\n  } else return __jsx(InputBlock, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, __jsx(\"label\", {\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, props.labelName), __jsx(Input, {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    mask: props.mask || '',\n    onChange: e => handleInputValue(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, valid ? props.validationEvents.valid.value : props.validationEvents.invalid.value));\n};\n\nexport default FormInput;","map":{"version":3,"sources":["C:/GitHub/brave_test_task/src/components/inputComponent/FormInput.js"],"names":["Input","InputBlock","useState","useEffect","FormInput","props","showChild","setShowChild","valid","setValid","value","setValue","handleInputValue","e","target","regExp","test","log","validVal","validateMethod","stateCallback","invalidVal","id","labelName","type","placeholder","mask","validationEvents","invalid"],"mappings":";;;AAAA,SAAQA,KAAR,EAAeC,UAAf,QAAgC,mBAAhC;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;AAGA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AACzB;AACA,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BL,QAAQ,CAAC,KAAD,CAA1C;AACAC,EAAAA,SAAS,CAAC,MAAM;AAAEI,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAAoB,GAA7B,EAA+B,EAA/B,CAAT;AAEA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBP,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM;AAAA,OAACQ,KAAD;AAAA,OAAQC;AAAR,MAAoBT,QAAQ,CAAC,EAAD,CAAlC;;AAGA,WAASU,gBAAT,CAA0BC,CAA1B,EAA6B;AACzB,QAAGH,KAAK,KAAKG,CAAC,CAACC,MAAF,CAASJ,KAAtB,EAA6B;AACzB,aAAO,IAAP;AACH,KAFD,MAEM,IAAGL,KAAK,CAACU,MAAN,CAAaC,IAAb,CAAkBH,CAAC,CAACC,MAAF,CAASJ,KAA3B,CAAH,EAAsC;AACxCO,MAAAA,GAAG;AACH,YAAMC,QAAQ,GAAGb,KAAK,CAACc,cAAN,CAAqBN,CAAC,CAACC,MAAF,CAASJ,KAA9B,CAAjB;AACAL,MAAAA,KAAK,CAACe,aAAN,CAAoBF,QAApB;AACAP,MAAAA,QAAQ,CAACE,CAAC,CAACC,MAAF,CAASJ,KAAV,CAAR;AACAD,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,KANK,MAMC;AACH,YAAMY,UAAU,GAAGhB,KAAK,CAACc,cAAN,CAAqBN,CAAC,CAACC,MAAF,CAASJ,KAA9B,CAAnB;AACAL,MAAAA,KAAK,CAACe,aAAN,CAAoBC,UAApB;AACAV,MAAAA,QAAQ,CAACE,CAAC,CAACC,MAAF,CAASJ,KAAV,CAAR;AACAD,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACH;AACJ;;AAED,MAAI,CAACH,SAAL,EAAgB;AACZ,WAAO,IAAP;AACH,GAFD,MAEM,OACF,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAED,KAAK,CAACiB,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BjB,KAAK,CAACkB,SAAjC,CADJ,EAEI,MAAC,KAAD;AACI,IAAA,EAAE,EAAElB,KAAK,CAACiB,EADd;AAEI,IAAA,IAAI,EAAEjB,KAAK,CAACmB,IAFhB;AAGI,IAAA,WAAW,EAAEnB,KAAK,CAACoB,WAHvB;AAII,IAAA,IAAI,EAAEpB,KAAK,CAACqB,IAAN,IAAc,EAJxB;AAKI,IAAA,QAAQ,EAAGb,CAAD,IAAMD,gBAAgB,CAACC,CAAD,CALpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAML,KAAK,GAAGH,KAAK,CAACsB,gBAAN,CAAuBnB,KAAvB,CAA6BE,KAAhC,GAAwCL,KAAK,CAACsB,gBAAN,CAAuBC,OAAvB,CAA+BlB,KAAlF,CATJ,CADE;AAaT,CAzCD;;AA2CA,eAAeN,SAAf","sourcesContent":["import {Input, InputBlock} from './FormInputStyled';\r\nimport {useState, useEffect} from 'react';\r\n\r\n\r\nconst FormInput = (props) => { \r\n    //для избежания предупреждения useLayoutEffect на стороне сервера\r\n    const [showChild, setShowChild] = useState(false);\r\n    useEffect(() => { setShowChild(true) }, []);\r\n\r\n    const [valid, setValid] = useState(false);\r\n    const [value, setValue] = useState('');\r\n\r\n\r\n    function handleInputValue(e) {\r\n        if(value === e.target.value) {\r\n            return true\r\n        }else if(props.regExp.test(e.target.value)) {\r\n            log\r\n            const validVal = props.validateMethod(e.target.value);\r\n            props.stateCallback(validVal);\r\n            setValue(e.target.value);\r\n            setValid(true);  \r\n        } else {\r\n            const invalidVal = props.validateMethod(e.target.value);\r\n            props.stateCallback(invalidVal);\r\n            setValue(e.target.value);\r\n            setValid(false);\r\n        }\r\n    }\r\n\r\n    if (!showChild) {\r\n        return null\r\n    }else return(\r\n        <InputBlock>\r\n            <label htmlFor={props.id}>{props.labelName}</label>\r\n            <Input\r\n                id={props.id}\r\n                type={props.type}\r\n                placeholder={props.placeholder}\r\n                mask={props.mask || ''}\r\n                onChange={(e)=> handleInputValue(e)}>\r\n            </Input>\r\n            <div>{valid ? props.validationEvents.valid.value : props.validationEvents.invalid.value}</div>\r\n        </InputBlock>\r\n    )\r\n}\r\n\r\nexport default FormInput"]},"metadata":{},"sourceType":"module"}