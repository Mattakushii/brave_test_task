{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\GitHub\\\\brave_test_task\\\\src\\\\pages\\\\pay\\\\[payOperatorID].js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport { PaymentContainer, InputBlock, Input } from '../../components/PaymentPageStyled';\nimport FormInput from '../../components/inputComponent/FormInput';\n\nvar PaymentPage = function PaymentPage(_ref) {\n  _s();\n\n  var data = _ref.data;\n\n  //добавить логические состояния validphone validpayment чтобы включать выключать кнопку\n  var _useState = useState(''),\n      phone = _useState[0],\n      setPhone = _useState[1];\n\n  var _useState2 = useState(false),\n      validPhone = _useState2[0],\n      setValidPhone = _useState2[1];\n\n  var _useState3 = useState(''),\n      payment = _useState3[0],\n      setPayment = _useState3[1];\n\n  var _useState4 = useState(false),\n      validPayment = _useState4[0],\n      setValidPayment = _useState4[1];\n\n  var _useState5 = useState(false),\n      validForm = _useState5[0],\n      setValidForm = _useState5[1];\n\n  var _useState6 = useState({\n    phone: '',\n    payment: ''\n  }),\n      errors = _useState6[0],\n      setErrors = _useState6[1]; //сделать логику для отключения кнопки\n\n\n  function handleUserInput(e) {\n    var inputName = e.target.name;\n    var value = e.target.value;\n\n    switch (inputName) {\n      case 'phone':\n        setPhone(value);\n        validateForm(inputName, phone);\n        break;\n\n      case 'payment':\n        setPayment(value);\n        validateForm(inputName, payment);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  function validateForm(fieldName, value) {\n    var validationErrors = errors;\n    var isValidPhone = validPhone;\n    var isValidPayment = validPayment;\n\n    switch (fieldName) {\n      case 'phone':\n        console.log(value);\n        break;\n        ca;\n    }\n\n    console.log(fieldName, value);\n  }\n\n  function sendData(e) {\n    console.log(phone, payment);\n    e.preventDefault();\n  }\n\n  if (data && data.id) {\n    return __jsx(PaymentContainer, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, __jsx(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }\n    }, \"\\u041E\\u043F\\u043B\\u0430\\u0442\\u0430 \", data.operatorName), __jsx(\"form\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, __jsx(InputBlock, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"phone\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 25\n      }\n    }, \"\\u041D\\u043E\\u043C\\u0435\\u0440 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\\u0430\"), __jsx(\"input\", {\n      id: \"phone\",\n      name: \"phone\",\n      value: phone,\n      type: \"tel\",\n      onChange: function onChange(e) {\n        return handleUserInput(e);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }\n    }), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }\n    }, \"\\u041E\\u0442\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0430 \\u043E\\u0448\\u0438\\u0431\\u043E\\u043A\")), __jsx(InputBlock, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"payment\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 25\n      }\n    }, \"\\u0421\\u0443\\u043C\\u043C\\u0430 \\u043F\\u043B\\u0430\\u0442\\u0435\\u0436\\u0430\"), __jsx(\"input\", {\n      id: \"payment\",\n      name: \"payment\",\n      value: payment,\n      type: \"text\",\n      onChange: function onChange(e) {\n        return handleUserInput(e);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 25\n      }\n    }), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }\n    }, \"\\u041E\\u0442\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0430 \\u043E\\u0448\\u0438\\u0431\\u043E\\u043A\")), __jsx(\"input\", {\n      type: \"submit\",\n      value: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\",\n      onClick: function onClick(e) {\n        sendData(e);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }\n    })));\n  } else {\n    return __jsx(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 16\n      }\n    }, data.errMessage);\n  }\n};\n\n_s(PaymentPage, \"BvywJkavmB4IUnHScjeznr3GFmU=\");\n\n_c = PaymentPage;\n\nPaymentPage.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n    var res, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(\"http://localhost:3000/api/operators/\".concat(ctx.query.payOperatorID));\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return res.json();\n\n          case 5:\n            data = _context.sent;\n            return _context.abrupt(\"return\", {\n              data: data\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default PaymentPage;\nvar validationPhoneEvents = {\n  valid: {\n    value: 'Верно!!!',\n    bool: true\n  },\n  invalid: {\n    value: 'Заполните поле до конца',\n    bool: false\n  }\n};\nvar validationPaymentEvents = {\n  valid: {\n    value: 'Верно!!!',\n    bool: true\n  },\n  invalid: {\n    value: 'Введите сумму от 1 до 1000 рублей',\n    bool: false\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentPage\");","map":{"version":3,"sources":["C:/GitHub/brave_test_task/src/pages/pay/[payOperatorID].js"],"names":["useState","PaymentContainer","InputBlock","Input","FormInput","PaymentPage","data","phone","setPhone","validPhone","setValidPhone","payment","setPayment","validPayment","setValidPayment","validForm","setValidForm","errors","setErrors","handleUserInput","e","inputName","target","name","value","validateForm","fieldName","validationErrors","isValidPhone","isValidPayment","console","log","ca","sendData","preventDefault","id","operatorName","errMessage","getInitialProps","ctx","fetch","query","payOperatorID","res","json","validationPhoneEvents","valid","bool","invalid","validationPaymentEvents"],"mappings":"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","sourcesContent":["import {useState} from 'react'; \r\nimport {PaymentContainer, InputBlock,Input} from '../../components/PaymentPageStyled';\r\nimport FormInput from '../../components/inputComponent/FormInput'\r\n\r\nconst PaymentPage = ({data}) => {\r\n    //добавить логические состояния validphone validpayment чтобы включать выключать кнопку\r\n    const [phone, setPhone] = useState('');\r\n    const [validPhone, setValidPhone] = useState(false);\r\n    const [payment, setPayment] = useState('');\r\n    const [validPayment, setValidPayment] = useState(false);\r\n    const [validForm, setValidForm] = useState(false);\r\n    const [errors, setErrors] = useState({\r\n        phone: '',\r\n        payment: '',\r\n    })\r\n    //сделать логику для отключения кнопки\r\n\r\n    function handleUserInput(e) {\r\n        const inputName = e.target.name;\r\n        const value = e.target.value;\r\n        switch(inputName) {\r\n            case 'phone': \r\n                setPhone(value);\r\n                validateForm(inputName, phone);\r\n                break;\r\n            case 'payment':\r\n                setPayment(value);\r\n                validateForm(inputName, payment);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    function validateForm(fieldName, value) {\r\n        let validationErrors = errors;\r\n        let isValidPhone = validPhone;\r\n        let isValidPayment = validPayment;\r\n\r\n        switch(fieldName) {\r\n            case 'phone': \r\n                console.log(value);\r\n                break;\r\n            ca\r\n        }\r\n        console.log(fieldName, value);\r\n    }\r\n\r\n    function sendData(e) {\r\n        console.log(phone, payment);\r\n        e.preventDefault();\r\n    }\r\n    \r\n    if (data && data.id) {\r\n        return (\r\n            <PaymentContainer>  \r\n                <h1>Оплата {data.operatorName}</h1>    \r\n                <form>\r\n                    <InputBlock>\r\n                        <label htmlFor=\"phone\">Номер телефона</label>\r\n                        <input \r\n                            id=\"phone\"\r\n                            name=\"phone\"\r\n                            value={phone} \r\n                            type=\"tel\"\r\n                            onChange={(e)=> handleUserInput(e)}\r\n                        ></input>\r\n                        <div>Отработка ошибок</div>\r\n                    </InputBlock>\r\n                    <InputBlock>\r\n                        <label htmlFor=\"payment\">Сумма платежа</label>\r\n                        <input \r\n                            id=\"payment\"\r\n                            name=\"payment\"\r\n                            value={payment} \r\n                            type=\"text\"\r\n                            onChange={(e)=> handleUserInput(e)}\r\n                        ></input>\r\n                        <div>Отработка ошибок</div>\r\n                    </InputBlock>\r\n                    \r\n                    <input type=\"submit\" value=\"Отправить\" onClick={(e)=> {sendData(e)}}></input>\r\n                </form>\r\n            </PaymentContainer>\r\n        )\r\n    } else {\r\n        return <h1>{data.errMessage}</h1>\r\n    }\r\n}\r\n\r\nPaymentPage.getInitialProps = async (ctx) => {\r\n    const res = await fetch(`http://localhost:3000/api/operators/${ctx.query.payOperatorID}`);\r\n    const data = await res.json();\r\n    return { data }\r\n}\r\n\r\nexport default PaymentPage\r\n\r\nconst validationPhoneEvents = {\r\n    valid: {\r\n        value: 'Верно!!!', \r\n        bool: true\r\n    },\r\n    invalid: {\r\n        value: 'Заполните поле до конца',\r\n        bool: false\r\n    }\r\n}\r\n\r\nconst validationPaymentEvents = {\r\n    valid: {\r\n        value: 'Верно!!!', \r\n        bool: true\r\n    },\r\n    invalid: {\r\n        value: 'Введите сумму от 1 до 1000 рублей',\r\n        bool: false\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}